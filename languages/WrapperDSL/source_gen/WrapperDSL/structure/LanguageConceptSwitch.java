package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AdviseScript = 0;
  public static final int BatterySensorExpression = 1;
  public static final int Command = 2;
  public static final int ConjunctionLogicalExpression = 3;
  public static final int Constant = 4;
  public static final int CoordenateSensorExpression = 5;
  public static final int DisjunctionNormalExpression = 6;
  public static final int DistanceConstant = 7;
  public static final int DistanceSensorExpression = 8;
  public static final int Given = 9;
  public static final int If = 10;
  public static final int Integer = 11;
  public static final int LogicalExpression = 12;
  public static final int MathElement = 13;
  public static final int MathExpression = 14;
  public static final int NormalLogicalExpression = 15;
  public static final int PointCut = 16;
  public static final int RegionSensorExpression = 17;
  public static final int SensorExpression = 18;
  public static final int Statement = 19;
  public static final int Text = 20;
  public static final int Then = 21;
  public static final int When = 22;
  public static final int While = 23;
  public static final int WindSensorExpression = 24;
  public static final int WrapperScript = 25;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L);
    builder.put(0x53be3ecc046e0b54L, AdviseScript);
    builder.put(0x53be3ecc04699240L, BatterySensorExpression);
    builder.put(0x53be3ecc047dcb4aL, Command);
    builder.put(0x53be3ecc045a8c9bL, ConjunctionLogicalExpression);
    builder.put(0x53be3ecc0462d3f8L, Constant);
    builder.put(0x53be3ecc045a8ce3L, CoordenateSensorExpression);
    builder.put(0x53be3ecc045a8c9cL, DisjunctionNormalExpression);
    builder.put(0x1ddd50fab11e853fL, DistanceConstant);
    builder.put(0x53be3ecc048c5944L, DistanceSensorExpression);
    builder.put(0x53be3ecc045a8bcaL, Given);
    builder.put(0x53be3ecc045b45abL, If);
    builder.put(0x53be3ecc0462d3fbL, Integer);
    builder.put(0x53be3ecc046bd51aL, LogicalExpression);
    builder.put(0x53be3ecc045a8bd6L, MathElement);
    builder.put(0x53be3ecc045a8bd7L, MathExpression);
    builder.put(0x53be3ecc045a8c64L, NormalLogicalExpression);
    builder.put(0x53be3ecc046e0b59L, PointCut);
    builder.put(0x53be3ecc045a8ce0L, RegionSensorExpression);
    builder.put(0x53be3ecc045a8c9dL, SensorExpression);
    builder.put(0x53be3ecc045b453cL, Statement);
    builder.put(0x53be3ecc0462d3feL, Text);
    builder.put(0x53be3ecc045a8bccL, Then);
    builder.put(0x53be3ecc045a8bcbL, When);
    builder.put(0x53be3ecc045b45acL, While);
    builder.put(0x53be3ecc045a8cddL, WindSensorExpression);
    builder.put(0x53be3ecc045a8bc3L, WrapperScript);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
