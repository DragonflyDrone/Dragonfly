package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AdviceAbstract = 0;
  public static final int After = 1;
  public static final int Around = 2;
  public static final int Before = 3;
  public static final int Boat = 4;
  public static final int CommandCall = 5;
  public static final int Drone = 6;
  public static final int Entity = 7;
  public static final int Environment = 8;
  public static final int Given = 9;
  public static final int If = 10;
  public static final int Land = 11;
  public static final int ListEntity = 12;
  public static final int LogicalExpression = 13;
  public static final int OnLand = 14;
  public static final int OnWater = 15;
  public static final int Primitive = 16;
  public static final int Repeat = 17;
  public static final int Script = 18;
  public static final int ShutDown = 19;
  public static final int Start = 20;
  public static final int State = 21;
  public static final int Statement = 22;
  public static final int StatementApi = 23;
  public static final int StepLest = 24;
  public static final int StepNearestToDestiny = 25;
  public static final int StepNearestToLand = 26;
  public static final int StepNearestToOrigem = 27;
  public static final int StepNearestToPosition = 28;
  public static final int StepNearestToWater = 29;
  public static final int StepNorth = 30;
  public static final int StepSouth = 31;
  public static final int StepWest = 32;
  public static final int TakeOff = 33;
  public static final int Then = 34;
  public static final int TurnLest = 35;
  public static final int TurnNorth = 36;
  public static final int TurnSouth = 37;
  public static final int TurnWest = 38;
  public static final int When = 39;
  public static final int While = 40;
  public static final int WrapperScript = 41;
  public static final int _false = 42;
  public static final int _true = 43;
  public static final int and = 44;
  public static final int clause = 45;
  public static final int constante = 46;
  public static final int greater = 47;
  public static final int greaterEqual = 48;
  public static final int is = 49;
  public static final int not = 50;
  public static final int or = 51;
  public static final int smaller = 52;
  public static final int smallerEqual = 53;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3c0688eb4e024d93L, 0x86be1d02f4019544L);
    builder.put(0x6b53188b89b66863L, AdviceAbstract);
    builder.put(0x6b53188b89b66867L, After);
    builder.put(0x6b53188b89b66868L, Around);
    builder.put(0x6b53188b89b66866L, Before);
    builder.put(0x75041c035612bd61L, Boat);
    builder.put(0x3d4e131fa1842b5dL, CommandCall);
    builder.put(0x5e9c4d0cabd35de2L, Drone);
    builder.put(0x1882a46173766d75L, Entity);
    builder.put(0x1fc7448200dbc343L, Environment);
    builder.put(0x7cbf9892eb647158L, Given);
    builder.put(0xf8231681b95e1ffL, If);
    builder.put(0x2481d1255afb5331L, Land);
    builder.put(0x1882a4617377f30dL, ListEntity);
    builder.put(0xf8231681b95e20fL, LogicalExpression);
    builder.put(0x6875dbacb66bbb3dL, OnLand);
    builder.put(0x6875dbacb66bbb3cL, OnWater);
    builder.put(0x75041c035612bd65L, Primitive);
    builder.put(0xf8231681b95e21aL, Repeat);
    builder.put(0xf8231681b960746L, Script);
    builder.put(0x2481d1255afb532fL, ShutDown);
    builder.put(0x2481d1255afb532eL, Start);
    builder.put(0x75041c035612bd62L, State);
    builder.put(0xf8231681b95e1fbL, Statement);
    builder.put(0x6b53188b89b69f43L, StatementApi);
    builder.put(0x2481d1255afb5339L, StepLest);
    builder.put(0x6875dbacb66bbb46L, StepNearestToDestiny);
    builder.put(0x6875dbacb66bbb3eL, StepNearestToLand);
    builder.put(0x6875dbacb66bbb47L, StepNearestToOrigem);
    builder.put(0x6875dbacb66bbb40L, StepNearestToPosition);
    builder.put(0x6875dbacb66bbb3fL, StepNearestToWater);
    builder.put(0x2481d1255afb5336L, StepNorth);
    builder.put(0x2481d1255afb5337L, StepSouth);
    builder.put(0x2481d1255afb5338L, StepWest);
    builder.put(0x2481d1255afb5330L, TakeOff);
    builder.put(0x7cbf9892eb647164L, Then);
    builder.put(0x2481d1255afb5335L, TurnLest);
    builder.put(0x2481d1255afb5332L, TurnNorth);
    builder.put(0x2481d1255afb5333L, TurnSouth);
    builder.put(0x2481d1255afb5334L, TurnWest);
    builder.put(0x7cbf9892eb647163L, When);
    builder.put(0xf8231681b95e221L, While);
    builder.put(0x5ef0a89f564c5022L, WrapperScript);
    builder.put(0x75041c0356140c98L, _false);
    builder.put(0x75041c0356140c97L, _true);
    builder.put(0x2481d1255afcd217L, and);
    builder.put(0x75041c03561733d0L, clause);
    builder.put(0x75041c0356140c96L, constante);
    builder.put(0x75041c0356140c92L, greater);
    builder.put(0x75041c0356140c93L, greaterEqual);
    builder.put(0x75041c0356140c90L, is);
    builder.put(0x75041c035612bd64L, not);
    builder.put(0x75041c035612bd63L, or);
    builder.put(0x75041c0356140c94L, smaller);
    builder.put(0x75041c0356140c95L, smallerEqual);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
