package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AccelerationModeConditionalExpression = 0;
  public static final int AccelerometerStateCommandExpression = 1;
  public static final int AccelerometerStateConditionalExpression = 2;
  public static final int AccelerometerStateTriggerEvent = 3;
  public static final int AdaptationBehavior = 4;
  public static final int AdaptationScript = 5;
  public static final int AnemometrerStateCommandExpression = 6;
  public static final int AnemometrerStateConditionalExpression = 7;
  public static final int AnemometrerStateTriggerEvent = 8;
  public static final int AnyInteger = 9;
  public static final int BarometerStateCommandExpression = 10;
  public static final int BarometerStateConditionalExpression = 11;
  public static final int BarometerStateTriggerEvent = 12;
  public static final int Baterry = 13;
  public static final int BatteryCapacityCommandExpression = 14;
  public static final int BatteryCapacityConditionalExpression = 15;
  public static final int BatteryCurrentCommandExpression = 16;
  public static final int BatteryCurrentConditionalExpression = 17;
  public static final int BatteryPercentageCommandExpression = 18;
  public static final int BatteryPercentageConditionalExpression = 19;
  public static final int BatteryStateConditionalExpression = 20;
  public static final int BatteryVoltageCommandExpression = 21;
  public static final int BatteryVoltageConditionalExpression = 22;
  public static final int CameraFocusPointConditionalExpression = 23;
  public static final int CameraFocuslPointCommandExpression = 24;
  public static final int CameraFocuslPointTriggerEvent = 25;
  public static final int CameraStateCommandExpression = 26;
  public static final int CameraStateConditionalExpression = 27;
  public static final int CameraStateTriggerEvent = 28;
  public static final int Command = 29;
  public static final int ComparativeRelativeDistanceConditionalExpression = 30;
  public static final int CompassStateCommandExpression = 31;
  public static final int CompassStateConditionalExpression = 32;
  public static final int CompassStateTriggerEvent = 33;
  public static final int ConditionalExpression = 34;
  public static final int Else = 35;
  public static final int EmergencyStopModeStateCommandExpression = 36;
  public static final int EmergencyStopModeStateConditionaExpression = 37;
  public static final int EmergencyStopModeStateTriggerEvent = 38;
  public static final int EnergySavingModeLowWarningCommandExpression = 39;
  public static final int EnergySavingModeLowWarningConditionalExpression = 40;
  public static final int EnergySavingModeStateCommandExpression = 41;
  public static final int EnergySavingModeStateConditionalExpression = 42;
  public static final int EnergySavingModeStateTriggerEvent = 43;
  public static final int EnergySavingModeVeryLowWarningCommandExpression = 44;
  public static final int EnergySavingModeVeryLowWarningConditionalExpression = 45;
  public static final int ExceptionalScenario = 46;
  public static final int Expression = 47;
  public static final int FlightControlStateCommandExpression = 48;
  public static final int FlightControlStateConditionalExpression = 49;
  public static final int FlightControlStateTriggerEvent = 50;
  public static final int FlightStatusStateConditionalExpression = 51;
  public static final int GPSSensorResultConditionalExpression = 52;
  public static final int GPSStateCommandExpression = 53;
  public static final int GPSStateConditionalExpression = 54;
  public static final int GPSStateTriggerEvent = 55;
  public static final int GeneralInteger = 56;
  public static final int GimbalRotationCommandExpression = 57;
  public static final int GimbalRotationConditionalExpression = 58;
  public static final int GimbalRotationTriggerEvent = 59;
  public static final int GimbalStateCommand = 60;
  public static final int GimbalStateConditionalExpression = 61;
  public static final int GimbalStateTriggerEvent = 62;
  public static final int Given = 63;
  public static final int GyroscopeStateCommandExpression = 64;
  public static final int GyroscopeStateConditionalExpression = 65;
  public static final int GyroscopeStateTriggerEvent = 66;
  public static final int HumidityLevelConditionalExpression = 67;
  public static final int HygrometerStateCommandExpression = 68;
  public static final int HygrometerStateConditionalExpression = 69;
  public static final int HygrometerStateTriggerEvent = 70;
  public static final int IMUStateCommandExpression = 71;
  public static final int IMUStateConditionalExpression = 72;
  public static final int IMUStateTriggerEvent = 73;
  public static final int If = 74;
  public static final int LandingStateCommandExpression = 75;
  public static final int LandingStateConditionalExpression = 76;
  public static final int LandingStateStateTrigger = 77;
  public static final int LandinggearStateCommandExpression = 78;
  public static final int LandinggearStateConditionalExpression = 79;
  public static final int LandinggearStateTriggerEvent = 80;
  public static final int LightStatusStateCommandExpression = 81;
  public static final int LightStatusStateConditionalExpression = 82;
  public static final int LightStatusStateTriggerEvent = 83;
  public static final int LogicalExpression = 84;
  public static final int MagnetometerStateCommandExpression = 85;
  public static final int MagnetometerStateConditionalExpression = 86;
  public static final int MagnetometerStateTriggerEvent = 87;
  public static final int MissionStateCommandExpression = 88;
  public static final int MissionStateConditionalExpression = 89;
  public static final int MissionStateTriggerEvent = 90;
  public static final int MissionWayPointsCommandExpression = 91;
  public static final int MissionWayPointsConditionalExpression = 92;
  public static final int ObstacleAvoidanceSensorResultConditionalExpression = 93;
  public static final int ObstacleAvoidanceSensorStateCommandExpression = 94;
  public static final int ObstacleAvoidanceSensorStateConditionalExpression = 95;
  public static final int ObstacleAvoidanceSensorStateTriggerEvent = 96;
  public static final int PayloadStateCommandExpression = 97;
  public static final int PayloadStateConditionalExpression = 98;
  public static final int PayloadStateTriggerEvent = 99;
  public static final int Point = 100;
  public static final int PointTriggerEvent = 101;
  public static final int RegionConditionalExpression = 102;
  public static final int RelativeDistanceConditionalExpression = 103;
  public static final int ReturnToHomeHomePointCommandExpression = 104;
  public static final int ReturnToHomeHomePointConditionalExpression = 105;
  public static final int ReturnToHomeHomePointCurrentPositionCommandExpression = 106;
  public static final int ReturnToHomeHomePointTriggerEvent = 107;
  public static final int ReturnToHomeStateCommandExpression = 108;
  public static final int ReturnToHomeStateConditionalExpression = 109;
  public static final int ReturnToHomeStateTriggerEvent = 110;
  public static final int SafeLandingStateCommandExpression = 111;
  public static final int SafeLandingStateConditionalExpression = 112;
  public static final int SafeLandingStateTriggerEvent = 113;
  public static final int ScalarDistanceConditionalExpression = 114;
  public static final int SmokerDetectorResultConditionalExpression = 115;
  public static final int SmokerDetectorStateCommandExpression = 116;
  public static final int SmokerDetectorStateConditionalExpression = 117;
  public static final int SmokerDetectorTriggerEvent = 118;
  public static final int Statement = 119;
  public static final int TakeOffStateCommandExpression = 120;
  public static final int TakeOffStateConditionalExpression = 121;
  public static final int TakeOffStateTriggerEvent = 122;
  public static final int TemperatureLevelConditionalExpression = 123;
  public static final int Then = 124;
  public static final int ThermometerStateCommand = 125;
  public static final int ThermometerStateConditionalExpression = 126;
  public static final int ThermometerStateTriggerEvent = 127;
  public static final int TriggerEvent = 128;
  public static final int UAVAccelerationCommandExpression = 129;
  public static final int UAVAccelerationConditionalExpression = 130;
  public static final int UAVAccelerationModeCommandExpression = 131;
  public static final int UAVAccelerationTriggerEvent = 132;
  public static final int UAVAltitudeCommandExpression = 133;
  public static final int UAVAltitudeConditionalExpression = 134;
  public static final int UAVAltitudeTriggerEvent = 135;
  public static final int UAVCurrentPositionConditionalExpression = 136;
  public static final int UAVManeuverDirectionCommandExpression = 137;
  public static final int UAVManeuverDirectionConditionalExpression = 138;
  public static final int UAVManeuverDirectionToRegionCommandExpression = 139;
  public static final int UAVManeuverDirectionToRegionConditionalExpression = 140;
  public static final int UAVManeuverDirectionTriggerEvent = 141;
  public static final int UAVMotorCommandExpression = 142;
  public static final int UAVMotorConditionalExpression = 143;
  public static final int UAVMotorTriggerEvent = 144;
  public static final int UAVRotateCommandExpression = 145;
  public static final int UAVRotateConditionalExpression = 146;
  public static final int UAVRotateTriggerEvent = 147;
  public static final int UAVSpeedCommandExpression = 148;
  public static final int UAVSpeedConditionalExpression = 149;
  public static final int UAVSpeedModeCommandExpression = 150;
  public static final int UAVSpeedModeConditionalExpression = 151;
  public static final int UAVSpeedTriggerEvent = 152;
  public static final int When = 153;
  public static final int While = 154;
  public static final int WindDirectionConditionalExpression = 155;
  public static final int WindSpeedConditionalExpression = 156;
  public static final int integer = 157;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L);
    builder.put(0x802ab50185ec9ccL, AccelerationModeConditionalExpression);
    builder.put(0x802ab50185ec9e6L, AccelerometerStateCommandExpression);
    builder.put(0x53e04e3aef16433aL, AccelerometerStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc0L, AccelerometerStateTriggerEvent);
    builder.put(0x4cdb8f81da5c7de7L, AdaptationBehavior);
    builder.put(0x53be3ecc046e0b54L, AdaptationScript);
    builder.put(0x802ab50185ed4a1L, AnemometrerStateCommandExpression);
    builder.put(0x53e04e3aef16434aL, AnemometrerStateConditionalExpression);
    builder.put(0x341ddc0f5796cbcbL, AnemometrerStateTriggerEvent);
    builder.put(0x11de48ed5d7ee280L, AnyInteger);
    builder.put(0x802ab50185ec9eaL, BarometerStateCommandExpression);
    builder.put(0x53e04e3aef16433eL, BarometerStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc5L, BarometerStateTriggerEvent);
    builder.put(0x11de48ed5d883eb5L, Baterry);
    builder.put(0x802ab50185ec9ddL, BatteryCapacityCommandExpression);
    builder.put(0x53e04e3aef164330L, BatteryCapacityConditionalExpression);
    builder.put(0x802ab50185ec9dfL, BatteryCurrentCommandExpression);
    builder.put(0x53e04e3aef164332L, BatteryCurrentConditionalExpression);
    builder.put(0x802ab50185ec9e0L, BatteryPercentageCommandExpression);
    builder.put(0x53e04e3aef164333L, BatteryPercentageConditionalExpression);
    builder.put(0x53e04e3aef164334L, BatteryStateConditionalExpression);
    builder.put(0x802ab50185ec9deL, BatteryVoltageCommandExpression);
    builder.put(0x53e04e3aef164331L, BatteryVoltageConditionalExpression);
    builder.put(0x53e04e3aef16432eL, CameraFocusPointConditionalExpression);
    builder.put(0x802ab50185ec9dbL, CameraFocuslPointCommandExpression);
    builder.put(0x341ddc0f5796cbbbL, CameraFocuslPointTriggerEvent);
    builder.put(0x802ab50185ec9daL, CameraStateCommandExpression);
    builder.put(0x53e04e3aef16432dL, CameraStateConditionalExpression);
    builder.put(0x341ddc0f5796cbbaL, CameraStateTriggerEvent);
    builder.put(0x6e9fd9358955fd28L, Command);
    builder.put(0x53e04e3aef164337L, ComparativeRelativeDistanceConditionalExpression);
    builder.put(0x802ab50185ec9e8L, CompassStateCommandExpression);
    builder.put(0x53e04e3aef16433cL, CompassStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc3L, CompassStateTriggerEvent);
    builder.put(0x7970d3ea932a97ffL, ConditionalExpression);
    builder.put(0x21327745460a73e5L, Else);
    builder.put(0x802ab50185ed4a2L, EmergencyStopModeStateCommandExpression);
    builder.put(0x53e04e3aef16434bL, EmergencyStopModeStateConditionaExpression);
    builder.put(0x341ddc0f5796cbccL, EmergencyStopModeStateTriggerEvent);
    builder.put(0x802ab50185ec9d2L, EnergySavingModeLowWarningCommandExpression);
    builder.put(0x53e04e3aef164324L, EnergySavingModeLowWarningConditionalExpression);
    builder.put(0x802ab50185ec9d4L, EnergySavingModeStateCommandExpression);
    builder.put(0x53e04e3aef164326L, EnergySavingModeStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb3L, EnergySavingModeStateTriggerEvent);
    builder.put(0x802ab50185ec9d3L, EnergySavingModeVeryLowWarningCommandExpression);
    builder.put(0x53e04e3aef164325L, EnergySavingModeVeryLowWarningConditionalExpression);
    builder.put(0x53be3ecc045a8bc3L, ExceptionalScenario);
    builder.put(0x7970d3ea932ed73dL, Expression);
    builder.put(0x802ab50185ec9d8L, FlightControlStateCommandExpression);
    builder.put(0x53e04e3aef16432aL, FlightControlStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb7L, FlightControlStateTriggerEvent);
    builder.put(0x53e04e3aef164343L, FlightStatusStateConditionalExpression);
    builder.put(0x7fd8262c2025d6deL, GPSSensorResultConditionalExpression);
    builder.put(0x802ab50185ec9e3L, GPSStateCommandExpression);
    builder.put(0x53e04e3aef164335L, GPSStateConditionalExpression);
    builder.put(0x341ddc0f5796cbbdL, GPSStateTriggerEvent);
    builder.put(0x11de48ed5d7ee269L, GeneralInteger);
    builder.put(0x802ab50185ec9d9L, GimbalRotationCommandExpression);
    builder.put(0x53e04e3aef16432bL, GimbalRotationConditionalExpression);
    builder.put(0x341ddc0f5796cbb8L, GimbalRotationTriggerEvent);
    builder.put(0x7fd8262c202614e1L, GimbalStateCommand);
    builder.put(0x53e04e3aef16432cL, GimbalStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb9L, GimbalStateTriggerEvent);
    builder.put(0x53be3ecc045a8bcaL, Given);
    builder.put(0x802ab50185ec9e7L, GyroscopeStateCommandExpression);
    builder.put(0x53e04e3aef16433bL, GyroscopeStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc1L, GyroscopeStateTriggerEvent);
    builder.put(0x53e04e3aef164340L, HumidityLevelConditionalExpression);
    builder.put(0x802ab50185ec9ebL, HygrometerStateCommandExpression);
    builder.put(0x53e04e3aef16433fL, HygrometerStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc6L, HygrometerStateTriggerEvent);
    builder.put(0x802ab50185ec9e5L, IMUStateCommandExpression);
    builder.put(0x53e04e3aef164339L, IMUStateConditionalExpression);
    builder.put(0x341ddc0f5796cbbfL, IMUStateTriggerEvent);
    builder.put(0x53be3ecc045b45abL, If);
    builder.put(0x802ab50185ec9d6L, LandingStateCommandExpression);
    builder.put(0x53e04e3aef164328L, LandingStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb5L, LandingStateStateTrigger);
    builder.put(0x802ab50185eca06L, LandinggearStateCommandExpression);
    builder.put(0x53e04e3aef164345L, LandinggearStateConditionalExpression);
    builder.put(0x341ddc0f5796cbcaL, LandinggearStateTriggerEvent);
    builder.put(0x802ab50185eca05L, LightStatusStateCommandExpression);
    builder.put(0x53e04e3aef164344L, LightStatusStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc9L, LightStatusStateTriggerEvent);
    builder.put(0x7970d3ea932a97fbL, LogicalExpression);
    builder.put(0x802ab50185ec9e9L, MagnetometerStateCommandExpression);
    builder.put(0x53e04e3aef16433dL, MagnetometerStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc4L, MagnetometerStateTriggerEvent);
    builder.put(0x802ab50185ec9ceL, MissionStateCommandExpression);
    builder.put(0x53e04e3aef164321L, MissionStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb0L, MissionStateTriggerEvent);
    builder.put(0x802ab50185ec9cdL, MissionWayPointsCommandExpression);
    builder.put(0x53e04e3aef164320L, MissionWayPointsConditionalExpression);
    builder.put(0x7fd8262c2025d766L, ObstacleAvoidanceSensorResultConditionalExpression);
    builder.put(0x802ab50185ec9e4L, ObstacleAvoidanceSensorStateCommandExpression);
    builder.put(0x53e04e3aef164338L, ObstacleAvoidanceSensorStateConditionalExpression);
    builder.put(0x341ddc0f5796cbbeL, ObstacleAvoidanceSensorStateTriggerEvent);
    builder.put(0x802ab50185ec9dcL, PayloadStateCommandExpression);
    builder.put(0x53e04e3aef16432fL, PayloadStateConditionalExpression);
    builder.put(0x341ddc0f5796cbbcL, PayloadStateTriggerEvent);
    builder.put(0x341ddc0f5796cfe9L, Point);
    builder.put(0x11de48ed5d7ee2dbL, PointTriggerEvent);
    builder.put(0x53be3ecc045a8ce0L, RegionConditionalExpression);
    builder.put(0x53e04e3aef164336L, RelativeDistanceConditionalExpression);
    builder.put(0x802ab50185ec9cfL, ReturnToHomeHomePointCommandExpression);
    builder.put(0x53e04e3aef164322L, ReturnToHomeHomePointConditionalExpression);
    builder.put(0x802ab50185ec9d0L, ReturnToHomeHomePointCurrentPositionCommandExpression);
    builder.put(0x341ddc0f5796cbb1L, ReturnToHomeHomePointTriggerEvent);
    builder.put(0x802ab50185ec9d1L, ReturnToHomeStateCommandExpression);
    builder.put(0x53e04e3aef164323L, ReturnToHomeStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb2L, ReturnToHomeStateTriggerEvent);
    builder.put(0x802ab50185ec9d5L, SafeLandingStateCommandExpression);
    builder.put(0x53e04e3aef164327L, SafeLandingStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb4L, SafeLandingStateTriggerEvent);
    builder.put(0x53be3ecc048c5944L, ScalarDistanceConditionalExpression);
    builder.put(0x7fd8262c2025d93cL, SmokerDetectorResultConditionalExpression);
    builder.put(0x3069a9862031a5b2L, SmokerDetectorStateCommandExpression);
    builder.put(0x802ab50185ec9ecL, SmokerDetectorStateConditionalExpression);
    builder.put(0x11de48ed5d7ee1e6L, SmokerDetectorTriggerEvent);
    builder.put(0x53be3ecc045b453cL, Statement);
    builder.put(0x802ab50185ec9d7L, TakeOffStateCommandExpression);
    builder.put(0x53e04e3aef164329L, TakeOffStateConditionalExpression);
    builder.put(0x341ddc0f5796cbb6L, TakeOffStateTriggerEvent);
    builder.put(0x53e04e3aef164342L, TemperatureLevelConditionalExpression);
    builder.put(0x53be3ecc045a8bccL, Then);
    builder.put(0x341ddc0f5796cbc8L, ThermometerStateCommand);
    builder.put(0x53e04e3aef164341L, ThermometerStateConditionalExpression);
    builder.put(0x341ddc0f5796cbc7L, ThermometerStateTriggerEvent);
    builder.put(0x802ab50185ab8ceL, TriggerEvent);
    builder.put(0x802ab50185ec9c7L, UAVAccelerationCommandExpression);
    builder.put(0x53e04e3aef1642e6L, UAVAccelerationConditionalExpression);
    builder.put(0x802ab50185ec9c8L, UAVAccelerationModeCommandExpression);
    builder.put(0x341ddc0f5796cbadL, UAVAccelerationTriggerEvent);
    builder.put(0x802ab50185ec9c9L, UAVAltitudeCommandExpression);
    builder.put(0x53e04e3aef1642e7L, UAVAltitudeConditionalExpression);
    builder.put(0x341ddc0f5796cbaeL, UAVAltitudeTriggerEvent);
    builder.put(0x341ddc0f5796cd40L, UAVCurrentPositionConditionalExpression);
    builder.put(0x802ab50185ec9c2L, UAVManeuverDirectionCommandExpression);
    builder.put(0x53e04e3aef155ad6L, UAVManeuverDirectionConditionalExpression);
    builder.put(0x802ab50185ec9c3L, UAVManeuverDirectionToRegionCommandExpression);
    builder.put(0x802ab50185ab8cfL, UAVManeuverDirectionToRegionConditionalExpression);
    builder.put(0x341ddc0f5796cbaaL, UAVManeuverDirectionTriggerEvent);
    builder.put(0x802ab50185ec9caL, UAVMotorCommandExpression);
    builder.put(0x802ab50185ab8b1L, UAVMotorConditionalExpression);
    builder.put(0x341ddc0f5796cbafL, UAVMotorTriggerEvent);
    builder.put(0x802ab50185ec9c4L, UAVRotateCommandExpression);
    builder.put(0x53e04e3aef1642e4L, UAVRotateConditionalExpression);
    builder.put(0x341ddc0f5796cbabL, UAVRotateTriggerEvent);
    builder.put(0x802ab50185ec9c5L, UAVSpeedCommandExpression);
    builder.put(0x53e04e3aef1642e5L, UAVSpeedConditionalExpression);
    builder.put(0x802ab50185ec9c6L, UAVSpeedModeCommandExpression);
    builder.put(0x802ab50185ec9cbL, UAVSpeedModeConditionalExpression);
    builder.put(0x341ddc0f5796cbacL, UAVSpeedTriggerEvent);
    builder.put(0x53be3ecc045a8bcbL, When);
    builder.put(0x53be3ecc045b45acL, While);
    builder.put(0x3069a986202089cdL, WindDirectionConditionalExpression);
    builder.put(0x53e04e3aef164346L, WindSpeedConditionalExpression);
    builder.put(0x11de48ed5d7ee26aL, integer);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
