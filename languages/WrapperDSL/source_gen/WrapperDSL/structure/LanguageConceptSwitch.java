package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AdviceAbstract = 0;
  public static final int After = 1;
  public static final int Around = 2;
  public static final int Before = 3;
  public static final int CommandCall = 4;
  public static final int Drone = 5;
  public static final int Entity = 6;
  public static final int Environment = 7;
  public static final int Given = 8;
  public static final int IfStatement = 9;
  public static final int Land = 10;
  public static final int ListEntity = 11;
  public static final int LogicalExpression = 12;
  public static final int Repeat = 13;
  public static final int Script = 14;
  public static final int ShutDown = 15;
  public static final int Start = 16;
  public static final int Statement = 17;
  public static final int StatementAPI = 18;
  public static final int StatementAbstract = 19;
  public static final int StepLest = 20;
  public static final int StepNorth = 21;
  public static final int StepSouth = 22;
  public static final int StepWest = 23;
  public static final int TakeOff = 24;
  public static final int Then = 25;
  public static final int TurnLest = 26;
  public static final int TurnNorth = 27;
  public static final int TurnSouth = 28;
  public static final int TurnWest = 29;
  public static final int When = 30;
  public static final int While = 31;
  public static final int WrapperScript = 32;
  public static final int and = 33;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3c0688eb4e024d93L, 0x86be1d02f4019544L);
    builder.put(0x6b53188b89b66863L, AdviceAbstract);
    builder.put(0x6b53188b89b66867L, After);
    builder.put(0x6b53188b89b66868L, Around);
    builder.put(0x6b53188b89b66866L, Before);
    builder.put(0x3d4e131fa1842b5dL, CommandCall);
    builder.put(0x5e9c4d0cabd35de2L, Drone);
    builder.put(0x1882a46173766d75L, Entity);
    builder.put(0x1fc7448200dbc343L, Environment);
    builder.put(0x7cbf9892eb647158L, Given);
    builder.put(0xf8231681b95e1ffL, IfStatement);
    builder.put(0x2481d1255afb5331L, Land);
    builder.put(0x1882a4617377f30dL, ListEntity);
    builder.put(0xf8231681b95e20fL, LogicalExpression);
    builder.put(0xf8231681b95e21aL, Repeat);
    builder.put(0xf8231681b960746L, Script);
    builder.put(0x2481d1255afb532fL, ShutDown);
    builder.put(0x2481d1255afb532eL, Start);
    builder.put(0xf8231681b95e124L, Statement);
    builder.put(0x6b53188b89b69f43L, StatementAPI);
    builder.put(0xf8231681b95e1fbL, StatementAbstract);
    builder.put(0x2481d1255afb5339L, StepLest);
    builder.put(0x2481d1255afb5336L, StepNorth);
    builder.put(0x2481d1255afb5337L, StepSouth);
    builder.put(0x2481d1255afb5338L, StepWest);
    builder.put(0x2481d1255afb5330L, TakeOff);
    builder.put(0x7cbf9892eb647164L, Then);
    builder.put(0x2481d1255afb5335L, TurnLest);
    builder.put(0x2481d1255afb5332L, TurnNorth);
    builder.put(0x2481d1255afb5333L, TurnSouth);
    builder.put(0x2481d1255afb5334L, TurnWest);
    builder.put(0x7cbf9892eb647163L, When);
    builder.put(0xf8231681b95e221L, While);
    builder.put(0x5ef0a89f564c5022L, WrapperScript);
    builder.put(0x2481d1255afcd217L, and);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
