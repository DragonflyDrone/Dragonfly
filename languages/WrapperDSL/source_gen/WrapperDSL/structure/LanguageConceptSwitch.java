package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AdaptationBehavior = 0;
  public static final int AdaptationScript = 1;
  public static final int AltitudeConditionalExpression = 2;
  public static final int AngularAccelerationConditionalExpression = 3;
  public static final int BatteryConditionalExpression = 4;
  public static final int CameraPowerConditionalExtension = 5;
  public static final int CancelGoHome = 6;
  public static final int CancelLanding = 7;
  public static final int CancelTakeOff = 8;
  public static final int CategoricalDistanceConditionalExpression = 9;
  public static final int CategoricalWindConditionalExpression = 10;
  public static final int Command = 11;
  public static final int CommandCall = 12;
  public static final int CompassConditionalExpression = 13;
  public static final int ConditionalExpression = 14;
  public static final int ConfirmLanding = 15;
  public static final int CoordenateConditionalExpression = 16;
  public static final int ExceptionalScenario = 17;
  public static final int Expression = 18;
  public static final int GimbalConditionalExtension = 19;
  public static final int Given = 20;
  public static final int If = 21;
  public static final int IsRunning = 22;
  public static final int LandingGearConditionalExtension = 23;
  public static final int LinearAccelerationConditionalExtension = 24;
  public static final int LogicalExpression = 25;
  public static final int MathElement = 26;
  public static final int MotorsPowerConditionalExtension = 27;
  public static final int OriginAndDestinationDistanceConditionalExpression = 28;
  public static final int PauseMission = 29;
  public static final int PayloadConditionalExtension = 30;
  public static final int PerformingCommandExpression = 31;
  public static final int RegionConditionalExpression = 32;
  public static final int ResumeMission = 33;
  public static final int SafeLand = 34;
  public static final int ScalarDistanceConditionalExpression = 35;
  public static final int ScalarWindConditionalExpression = 36;
  public static final int SetAutoFlightSpeed = 37;
  public static final int SetGoHomeHeightInMeters = 38;
  public static final int SetHomeLocation = 39;
  public static final int SetHomeLocationUsingAircraftCurrentLocation = 40;
  public static final int SetLowBatteryWarningThreshold = 41;
  public static final int SetSeriousLowBatteryWarningThreshold = 42;
  public static final int SetSmartReturnToHomeEnabled = 43;
  public static final int SpeedConditionalExpression = 44;
  public static final int StartGoHome = 45;
  public static final int StartLanding = 46;
  public static final int StartMission = 47;
  public static final int StartPrecisionTakeOff = 48;
  public static final int StartTakeOff = 49;
  public static final int Statement = 50;
  public static final int Text = 51;
  public static final int Then = 52;
  public static final int TrashConjunctionLogicalExpression = 53;
  public static final int TurnOffMotors = 54;
  public static final int TurnOnMotors = 55;
  public static final int Value = 56;
  public static final int When = 57;
  public static final int While = 58;
  public static final int WifiConditionalExtension = 59;
  public static final int trashDisjunctionLogicalExpression = 60;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L);
    builder.put(0x4cdb8f81da5c7de7L, AdaptationBehavior);
    builder.put(0x53be3ecc046e0b54L, AdaptationScript);
    builder.put(0x1053550ed8ac3a37L, AltitudeConditionalExpression);
    builder.put(0x1e50d2b0bcf0f56aL, AngularAccelerationConditionalExpression);
    builder.put(0x53be3ecc04699240L, BatteryConditionalExpression);
    builder.put(0x1053550ed8b71613L, CameraPowerConditionalExtension);
    builder.put(0x6e9fd935895a9525L, CancelGoHome);
    builder.put(0x6e9fd935895a94d4L, CancelLanding);
    builder.put(0x6e9fd9358959647dL, CancelTakeOff);
    builder.put(0x7970d3ea933febfdL, CategoricalDistanceConditionalExpression);
    builder.put(0x53be3ecc045a8cddL, CategoricalWindConditionalExpression);
    builder.put(0x53be3ecc047dcb4aL, Command);
    builder.put(0x6e9fd9358955fd28L, CommandCall);
    builder.put(0x3f0a90391eda7f7L, CompassConditionalExpression);
    builder.put(0x7970d3ea932a97ffL, ConditionalExpression);
    builder.put(0x6e9fd935895a94efL, ConfirmLanding);
    builder.put(0x53be3ecc045a8ce3L, CoordenateConditionalExpression);
    builder.put(0x53be3ecc045a8bc3L, ExceptionalScenario);
    builder.put(0x7970d3ea932ed73dL, Expression);
    builder.put(0x1053550ed8b71646L, GimbalConditionalExtension);
    builder.put(0x53be3ecc045a8bcaL, Given);
    builder.put(0x53be3ecc045b45abL, If);
    builder.put(0x78c933fd42a0f8a8L, IsRunning);
    builder.put(0x1053550ed8b3fbfaL, LandingGearConditionalExtension);
    builder.put(0x3004f1bb9b15123cL, LinearAccelerationConditionalExtension);
    builder.put(0x7970d3ea932a97fbL, LogicalExpression);
    builder.put(0x53be3ecc045a8bd6L, MathElement);
    builder.put(0x1053550ed8b2a0a3L, MotorsPowerConditionalExtension);
    builder.put(0x72508e21f03ced43L, OriginAndDestinationDistanceConditionalExpression);
    builder.put(0x6e9fd935895bcb96L, PauseMission);
    builder.put(0x1053550ed8b3fc74L, PayloadConditionalExtension);
    builder.put(0x78c933fd429ad1d9L, PerformingCommandExpression);
    builder.put(0x53be3ecc045a8ce0L, RegionConditionalExpression);
    builder.put(0x6e9fd935895bcbb1L, ResumeMission);
    builder.put(0x4f78da14d91a0524L, SafeLand);
    builder.put(0x53be3ecc048c5944L, ScalarDistanceConditionalExpression);
    builder.put(0x7970d3ea93368919L, ScalarWindConditionalExpression);
    builder.put(0x6e9fd935895bcbe8L, SetAutoFlightSpeed);
    builder.put(0x6e9fd935895a955bL, SetGoHomeHeightInMeters);
    builder.put(0x6e9fd93589583f6bL, SetHomeLocation);
    builder.put(0x6e9fd935895a9540L, SetHomeLocationUsingAircraftCurrentLocation);
    builder.put(0x6e9fd935895bcacfL, SetLowBatteryWarningThreshold);
    builder.put(0x6e9fd935895bcb00L, SetSeriousLowBatteryWarningThreshold);
    builder.put(0x6e9fd935895bcb3cL, SetSmartReturnToHomeEnabled);
    builder.put(0x3f0a90391ea8938L, SpeedConditionalExpression);
    builder.put(0x6e9fd935895a950aL, StartGoHome);
    builder.put(0x6e9fd93589596498L, StartLanding);
    builder.put(0x6e9fd935895bcb74L, StartMission);
    builder.put(0x6e9fd93589596462L, StartPrecisionTakeOff);
    builder.put(0x6e9fd93589596447L, StartTakeOff);
    builder.put(0x53be3ecc045b453cL, Statement);
    builder.put(0x53be3ecc0462d3feL, Text);
    builder.put(0x53be3ecc045a8bccL, Then);
    builder.put(0x53be3ecc045a8c9bL, TrashConjunctionLogicalExpression);
    builder.put(0x6e9fd93589596429L, TurnOffMotors);
    builder.put(0x6e9fd9358959640bL, TurnOnMotors);
    builder.put(0x53be3ecc0462d3fbL, Value);
    builder.put(0x53be3ecc045a8bcbL, When);
    builder.put(0x53be3ecc045b45acL, While);
    builder.put(0x1053550ed8b3fc39L, WifiConditionalExtension);
    builder.put(0x53be3ecc045a8c9cL, trashDisjunctionLogicalExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
