package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Actuator = 0;
  public static final int AdviceAbstract = 1;
  public static final int After = 2;
  public static final int Around = 3;
  public static final int BatterySensorNormalLogicalExpression = 4;
  public static final int Before = 5;
  public static final int Command = 6;
  public static final int Component = 7;
  public static final int ConjunctionExpression = 8;
  public static final int Constant = 9;
  public static final int CoordinatesState = 10;
  public static final int DestinyRegion = 11;
  public static final int DisjunctionExpression = 12;
  public static final int GPSSensorNormalLogicalExpression = 13;
  public static final int Given = 14;
  public static final int If = 15;
  public static final int IntegerConstant = 16;
  public static final int Land = 17;
  public static final int LandRegionState = 18;
  public static final int LightWindState = 19;
  public static final int LoadActuator = 20;
  public static final int LoadSensorNormalExpression = 21;
  public static final int LoadedState = 22;
  public static final int LoadingState = 23;
  public static final int LogicalExpression = 24;
  public static final int MathConstant = 25;
  public static final int MathElement = 26;
  public static final int NormalLogicalExpression = 27;
  public static final int NormalWindState = 28;
  public static final int Operator = 29;
  public static final int OrigemRegion = 30;
  public static final int RegionState = 31;
  public static final int Repeat = 32;
  public static final int SafeLanding = 33;
  public static final int SensorConstant = 34;
  public static final int SensorNormalLogicalExpression = 35;
  public static final int ShutDown = 36;
  public static final int Start = 37;
  public static final int State = 38;
  public static final int Statement = 39;
  public static final int StepLest = 40;
  public static final int StepNearestToDestiny = 41;
  public static final int StepNearestToLand = 42;
  public static final int StepNearestToOrigem = 43;
  public static final int StepNearestToPosition = 44;
  public static final int StepNearestToWater = 45;
  public static final int StepNorth = 46;
  public static final int StepSouth = 47;
  public static final int StepWest = 48;
  public static final int StringConstant = 49;
  public static final int StrongWindState = 50;
  public static final int TakeOff = 51;
  public static final int Then = 52;
  public static final int TurnLest = 53;
  public static final int TurnNorth = 54;
  public static final int TurnSouth = 55;
  public static final int TurnWest = 56;
  public static final int UnloadedState = 57;
  public static final int WaterRegionState = 58;
  public static final int When = 59;
  public static final int While = 60;
  public static final int WindSensorNormalLogicalExpression = 61;
  public static final int WindState = 62;
  public static final int WrapperScript = 63;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3c0688eb4e024d93L, 0x86be1d02f4019544L);
    builder.put(0x570c33aa527a97cbL, Actuator);
    builder.put(0x6b53188b89b66863L, AdviceAbstract);
    builder.put(0x6b53188b89b66867L, After);
    builder.put(0x6b53188b89b66868L, Around);
    builder.put(0x570c33aa527a9790L, BatterySensorNormalLogicalExpression);
    builder.put(0x6b53188b89b66866L, Before);
    builder.put(0x3d4e131fa1842b5dL, Command);
    builder.put(0x570c33aa527a9797L, Component);
    builder.put(0x2bffada1898cef7cL, ConjunctionExpression);
    builder.put(0x2bffada1898cef83L, Constant);
    builder.put(0x570c33aa528361a8L, CoordinatesState);
    builder.put(0x2bffada189a44a43L, DestinyRegion);
    builder.put(0x2bffada1898cef7dL, DisjunctionExpression);
    builder.put(0x570c33aa527a9793L, GPSSensorNormalLogicalExpression);
    builder.put(0x7cbf9892eb647158L, Given);
    builder.put(0xf8231681b95e1ffL, If);
    builder.put(0x2bffada1898cef84L, IntegerConstant);
    builder.put(0x2481d1255afb5331L, Land);
    builder.put(0x570c33aa52836172L, LandRegionState);
    builder.put(0x570c33aa5283616aL, LightWindState);
    builder.put(0x570c33aa527a9796L, LoadActuator);
    builder.put(0x570c33aa527a9830L, LoadSensorNormalExpression);
    builder.put(0x570c33aa52849c5cL, LoadedState);
    builder.put(0x570c33aa52849c5eL, LoadingState);
    builder.put(0xf8231681b95e20fL, LogicalExpression);
    builder.put(0x2bffada18999c8a3L, MathConstant);
    builder.put(0x2bffada1898cef7bL, MathElement);
    builder.put(0x2bffada1898cefa7L, NormalLogicalExpression);
    builder.put(0x570c33aa5283616bL, NormalWindState);
    builder.put(0x2bffada1898cefa8L, Operator);
    builder.put(0x2bffada189a44a44L, OrigemRegion);
    builder.put(0x570c33aa52836173L, RegionState);
    builder.put(0xf8231681b95e21aL, Repeat);
    builder.put(0x2bffada189a3a7d9L, SafeLanding);
    builder.put(0x2bffada18999c8dcL, SensorConstant);
    builder.put(0x2bffada189922149L, SensorNormalLogicalExpression);
    builder.put(0x2481d1255afb532fL, ShutDown);
    builder.put(0x2481d1255afb532eL, Start);
    builder.put(0x2bffada1898d1413L, State);
    builder.put(0xf8231681b95e1fbL, Statement);
    builder.put(0x2481d1255afb5339L, StepLest);
    builder.put(0x6875dbacb66bbb46L, StepNearestToDestiny);
    builder.put(0x6875dbacb66bbb3eL, StepNearestToLand);
    builder.put(0x6875dbacb66bbb47L, StepNearestToOrigem);
    builder.put(0x6875dbacb66bbb40L, StepNearestToPosition);
    builder.put(0x6875dbacb66bbb3fL, StepNearestToWater);
    builder.put(0x2481d1255afb5336L, StepNorth);
    builder.put(0x2481d1255afb5337L, StepSouth);
    builder.put(0x2481d1255afb5338L, StepWest);
    builder.put(0x2bffada1898d13c7L, StringConstant);
    builder.put(0x570c33aa52836169L, StrongWindState);
    builder.put(0x2481d1255afb5330L, TakeOff);
    builder.put(0x7cbf9892eb647164L, Then);
    builder.put(0x2481d1255afb5335L, TurnLest);
    builder.put(0x2481d1255afb5332L, TurnNorth);
    builder.put(0x2481d1255afb5333L, TurnSouth);
    builder.put(0x2481d1255afb5334L, TurnWest);
    builder.put(0x570c33aa52849c5dL, UnloadedState);
    builder.put(0x570c33aa5283616fL, WaterRegionState);
    builder.put(0x7cbf9892eb647163L, When);
    builder.put(0xf8231681b95e221L, While);
    builder.put(0x570c33aa52836144L, WindSensorNormalLogicalExpression);
    builder.put(0x570c33aa5283616cL, WindState);
    builder.put(0x5ef0a89f564c5022L, WrapperScript);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
