package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AdviceAbstract;
  private ConceptPresentation props_After;
  private ConceptPresentation props_Around;
  private ConceptPresentation props_Before;
  private ConceptPresentation props_CommandCall;
  private ConceptPresentation props_Drone;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_Given;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_Land;
  private ConceptPresentation props_ListEntity;
  private ConceptPresentation props_LogicalExpression;
  private ConceptPresentation props_Repeat;
  private ConceptPresentation props_Script;
  private ConceptPresentation props_ShutDown;
  private ConceptPresentation props_Start;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_StatementAPI;
  private ConceptPresentation props_StatementAbstract;
  private ConceptPresentation props_StepLest;
  private ConceptPresentation props_StepNorth;
  private ConceptPresentation props_StepSouth;
  private ConceptPresentation props_StepWest;
  private ConceptPresentation props_TakeOff;
  private ConceptPresentation props_Then;
  private ConceptPresentation props_TurnLest;
  private ConceptPresentation props_TurnNorth;
  private ConceptPresentation props_TurnSouth;
  private ConceptPresentation props_TurnWest;
  private ConceptPresentation props_When;
  private ConceptPresentation props_While;
  private ConceptPresentation props_WrapperScript;
  private ConceptPresentation props_and;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AdviceAbstract:
        if (props_AdviceAbstract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AdviceAbstract = cpb.create();
        }
        return props_AdviceAbstract;
      case LanguageConceptSwitch.After:
        if (props_After == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("After");
          props_After = cpb.create();
        }
        return props_After;
      case LanguageConceptSwitch.Around:
        if (props_Around == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Around");
          props_Around = cpb.create();
        }
        return props_Around;
      case LanguageConceptSwitch.Before:
        if (props_Before == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Before");
          props_Before = cpb.create();
        }
        return props_Before;
      case LanguageConceptSwitch.CommandCall:
        if (props_CommandCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CommandCall = cpb.create();
        }
        return props_CommandCall;
      case LanguageConceptSwitch.Drone:
        if (props_Drone == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Drone");
          props_Drone = cpb.create();
        }
        return props_Drone;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Environment");
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.Given:
        if (props_Given == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Given");
          props_Given = cpb.create();
        }
        return props_Given;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.Land:
        if (props_Land == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Land");
          props_Land = cpb.create();
        }
        return props_Land;
      case LanguageConceptSwitch.ListEntity:
        if (props_ListEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ListEntity");
          props_ListEntity = cpb.create();
        }
        return props_ListEntity;
      case LanguageConceptSwitch.LogicalExpression:
        if (props_LogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LogicalExpression");
          props_LogicalExpression = cpb.create();
        }
        return props_LogicalExpression;
      case LanguageConceptSwitch.Repeat:
        if (props_Repeat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("repeat");
          props_Repeat = cpb.create();
        }
        return props_Repeat;
      case LanguageConceptSwitch.Script:
        if (props_Script == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Script = cpb.create();
        }
        return props_Script;
      case LanguageConceptSwitch.ShutDown:
        if (props_ShutDown == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ShutDown");
          props_ShutDown = cpb.create();
        }
        return props_ShutDown;
      case LanguageConceptSwitch.Start:
        if (props_Start == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Start");
          props_Start = cpb.create();
        }
        return props_Start;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Statement");
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.StatementAPI:
        if (props_StatementAPI == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StatementAPI = cpb.create();
        }
        return props_StatementAPI;
      case LanguageConceptSwitch.StatementAbstract:
        if (props_StatementAbstract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StatementAbstract = cpb.create();
        }
        return props_StatementAbstract;
      case LanguageConceptSwitch.StepLest:
        if (props_StepLest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StepLest");
          props_StepLest = cpb.create();
        }
        return props_StepLest;
      case LanguageConceptSwitch.StepNorth:
        if (props_StepNorth == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StepNorth");
          props_StepNorth = cpb.create();
        }
        return props_StepNorth;
      case LanguageConceptSwitch.StepSouth:
        if (props_StepSouth == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StepSouth");
          props_StepSouth = cpb.create();
        }
        return props_StepSouth;
      case LanguageConceptSwitch.StepWest:
        if (props_StepWest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StepWest");
          props_StepWest = cpb.create();
        }
        return props_StepWest;
      case LanguageConceptSwitch.TakeOff:
        if (props_TakeOff == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TakeOff");
          props_TakeOff = cpb.create();
        }
        return props_TakeOff;
      case LanguageConceptSwitch.Then:
        if (props_Then == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Then");
          props_Then = cpb.create();
        }
        return props_Then;
      case LanguageConceptSwitch.TurnLest:
        if (props_TurnLest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TurnLest");
          props_TurnLest = cpb.create();
        }
        return props_TurnLest;
      case LanguageConceptSwitch.TurnNorth:
        if (props_TurnNorth == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TurnNorth");
          props_TurnNorth = cpb.create();
        }
        return props_TurnNorth;
      case LanguageConceptSwitch.TurnSouth:
        if (props_TurnSouth == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TurnSouth");
          props_TurnSouth = cpb.create();
        }
        return props_TurnSouth;
      case LanguageConceptSwitch.TurnWest:
        if (props_TurnWest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TurnWest");
          props_TurnWest = cpb.create();
        }
        return props_TurnWest;
      case LanguageConceptSwitch.When:
        if (props_When == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("When");
          props_When = cpb.create();
        }
        return props_When;
      case LanguageConceptSwitch.While:
        if (props_While == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("while");
          props_While = cpb.create();
        }
        return props_While;
      case LanguageConceptSwitch.WrapperScript:
        if (props_WrapperScript == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WrapperScript = cpb.create();
        }
        return props_WrapperScript;
      case LanguageConceptSwitch.and:
        if (props_and == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("and");
          props_and = cpb.create();
        }
        return props_and;
    }
    return null;
  }
}
