package WrapperDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAdaptationBehavior = createDescriptorForAdaptationBehavior();
  /*package*/ final ConceptDescriptor myConceptAdaptationScript = createDescriptorForAdaptationScript();
  /*package*/ final ConceptDescriptor myConceptAltitudeConditionalExpression = createDescriptorForAltitudeConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptAngularAccelerationConditionalExpression = createDescriptorForAngularAccelerationConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptAnyBoolean = createDescriptorForAnyBoolean();
  /*package*/ final ConceptDescriptor myConceptAnyNumber = createDescriptorForAnyNumber();
  /*package*/ final ConceptDescriptor myConceptBatteryConditionalExpression = createDescriptorForBatteryConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptBooleanValue = createDescriptorForBooleanValue();
  /*package*/ final ConceptDescriptor myConceptCameraPowerConditionalExpression = createDescriptorForCameraPowerConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptCardinalPointsRotate = createDescriptorForCardinalPointsRotate();
  /*package*/ final ConceptDescriptor myConceptCategoricalDistanceConditionalExpression = createDescriptorForCategoricalDistanceConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptCategoricalWindConditionalExpression = createDescriptorForCategoricalWindConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptCollisionSensorConditionalExpression = createDescriptorForCollisionSensorConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptCommandCall = createDescriptorForCommandCall();
  /*package*/ final ConceptDescriptor myConceptCompassConditionalExpression = createDescriptorForCompassConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptConditionalExpression = createDescriptorForConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptCoordenateConditionalExpression = createDescriptorForCoordenateConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptDegreesRotate = createDescriptorForDegreesRotate();
  /*package*/ final ConceptDescriptor myConceptDetectSmokeConditionalExpression = createDescriptorForDetectSmokeConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptElse = createDescriptorForElse();
  /*package*/ final ConceptDescriptor myConceptExceptionalScenario = createDescriptorForExceptionalScenario();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFlyDirection = createDescriptorForFlyDirection();
  /*package*/ final ConceptDescriptor myConceptFlyToCoordinates = createDescriptorForFlyToCoordinates();
  /*package*/ final ConceptDescriptor myConceptFlyToRegion = createDescriptorForFlyToRegion();
  /*package*/ final ConceptDescriptor myConceptGambialCommand = createDescriptorForGambialCommand();
  /*package*/ final ConceptDescriptor myConceptGimbalConditionalExpression = createDescriptorForGimbalConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptGiven = createDescriptorForGiven();
  /*package*/ final ConceptDescriptor myConceptGpsConditionalExpression = createDescriptorForGpsConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptIf = createDescriptorForIf();
  /*package*/ final ConceptDescriptor myConceptIntegerNumber = createDescriptorForIntegerNumber();
  /*package*/ final ConceptDescriptor myConceptLanding = createDescriptorForLanding();
  /*package*/ final ConceptDescriptor myConceptLandingGearConditionalExpression = createDescriptorForLandingGearConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptLinearAccelerationConditionalExpression = createDescriptorForLinearAccelerationConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalExpression = createDescriptorForLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptMotorsPowerConditionalExpression = createDescriptorForMotorsPowerConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptNormalBooleanValue = createDescriptorForNormalBooleanValue();
  /*package*/ final ConceptDescriptor myConceptNumber = createDescriptorForNumber();
  /*package*/ final ConceptDescriptor myConceptOnOffSmokeConditionalExpression = createDescriptorForOnOffSmokeConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptOriginAndDestinationDistanceConditionalExpression = createDescriptorForOriginAndDestinationDistanceConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptPayloadConditionalExpression = createDescriptorForPayloadConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptPerformingCommandConditionalExpression = createDescriptorForPerformingCommandConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptRegionConditionalExpression = createDescriptorForRegionConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptReturnToHome = createDescriptorForReturnToHome();
  /*package*/ final ConceptDescriptor myConceptSafeLand = createDescriptorForSafeLand();
  /*package*/ final ConceptDescriptor myConceptScalarDistanceConditionalExpression = createDescriptorForScalarDistanceConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptScalarWindConditionalExpression = createDescriptorForScalarWindConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptSetAutoFlightSpeed = createDescriptorForSetAutoFlightSpeed();
  /*package*/ final ConceptDescriptor myConceptSetGoHomeHeightInMeters = createDescriptorForSetGoHomeHeightInMeters();
  /*package*/ final ConceptDescriptor myConceptSetHomeLocation = createDescriptorForSetHomeLocation();
  /*package*/ final ConceptDescriptor myConceptSetHomeLocationUsingAircraftCurrentLocation = createDescriptorForSetHomeLocationUsingAircraftCurrentLocation();
  /*package*/ final ConceptDescriptor myConceptSetLowBatteryWarningThreshold = createDescriptorForSetLowBatteryWarningThreshold();
  /*package*/ final ConceptDescriptor myConceptSetMission = createDescriptorForSetMission();
  /*package*/ final ConceptDescriptor myConceptSetSeriousLowBatteryWarningThreshold = createDescriptorForSetSeriousLowBatteryWarningThreshold();
  /*package*/ final ConceptDescriptor myConceptSetSmartReturnToHomeEnabled = createDescriptorForSetSmartReturnToHomeEnabled();
  /*package*/ final ConceptDescriptor myConceptSpeedConditionalExpression = createDescriptorForSpeedConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptTakeOff = createDescriptorForTakeOff();
  /*package*/ final ConceptDescriptor myConceptText = createDescriptorForText();
  /*package*/ final ConceptDescriptor myConceptThen = createDescriptorForThen();
  /*package*/ final ConceptDescriptor myConceptTurnAutomaticControl = createDescriptorForTurnAutomaticControl();
  /*package*/ final ConceptDescriptor myConceptTurnCamera = createDescriptorForTurnCamera();
  /*package*/ final ConceptDescriptor myConceptTurnEconomyMode = createDescriptorForTurnEconomyMode();
  /*package*/ final ConceptDescriptor myConceptTurnMission = createDescriptorForTurnMission();
  /*package*/ final ConceptDescriptor myConceptTurnMotors = createDescriptorForTurnMotors();
  /*package*/ final ConceptDescriptor myConceptValue = createDescriptorForValue();
  /*package*/ final ConceptDescriptor myConceptWhen = createDescriptorForWhen();
  /*package*/ final ConceptDescriptor myConceptWhile = createDescriptorForWhile();
  /*package*/ final ConceptDescriptor myConceptWifiConditionalExpression = createDescriptorForWifiConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptWindDirectionConditionalExpression = createDescriptorForWindDirectionConditionalExpression();
  /*package*/ final EnumerationDescriptor myEnumerationAxisEnum = new EnumerationDescriptor_AxisEnum();
  /*package*/ final EnumerationDescriptor myEnumerationCategoricalDistanceEnum = new EnumerationDescriptor_CategoricalDistanceEnum();
  /*package*/ final EnumerationDescriptor myEnumerationCategoricalWindEnum = new EnumerationDescriptor_CategoricalWindEnum();
  /*package*/ final EnumerationDescriptor myEnumerationCommandStateEnum = new EnumerationDescriptor_CommandStateEnum();
  /*package*/ final EnumerationDescriptor myEnumerationConditionalOperatorEnum = new EnumerationDescriptor_ConditionalOperatorEnum();
  /*package*/ final EnumerationDescriptor myEnumerationDirectionsEnum = new EnumerationDescriptor_DirectionsEnum();
  /*package*/ final EnumerationDescriptor myEnumerationGambialEnum = new EnumerationDescriptor_GambialEnum();
  /*package*/ final EnumerationDescriptor myEnumerationInaquelityConditionalOperator = new EnumerationDescriptor_InaquelityConditionalOperator();
  /*package*/ final EnumerationDescriptor myEnumerationInternalStateEnum = new EnumerationDescriptor_InternalStateEnum();
  /*package*/ final EnumerationDescriptor myEnumerationIqualityOperatorEnum = new EnumerationDescriptor_IqualityOperatorEnum();
  /*package*/ final EnumerationDescriptor myEnumerationLogicalOperatorEnum = new EnumerationDescriptor_LogicalOperatorEnum();
  /*package*/ final EnumerationDescriptor myEnumerationRegionEnum = new EnumerationDescriptor_RegionEnum();
  /*package*/ final EnumerationDescriptor myEnumerationTurnConditionalEnum = new EnumerationDescriptor_TurnConditionalEnum();
  /*package*/ final EnumerationDescriptor myEnumerationTypeOfAdaptationEnum = new EnumerationDescriptor_TypeOfAdaptationEnum();
  /*package*/ final EnumerationDescriptor myEnumerationbooleanDetectionEnum = new EnumerationDescriptor_booleanDetectionEnum();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAdaptationBehavior, myConceptAdaptationScript, myConceptAltitudeConditionalExpression, myConceptAngularAccelerationConditionalExpression, myConceptAnyBoolean, myConceptAnyNumber, myConceptBatteryConditionalExpression, myConceptBooleanValue, myConceptCameraPowerConditionalExpression, myConceptCardinalPointsRotate, myConceptCategoricalDistanceConditionalExpression, myConceptCategoricalWindConditionalExpression, myConceptCollisionSensorConditionalExpression, myConceptCommandCall, myConceptCompassConditionalExpression, myConceptConditionalExpression, myConceptCoordenateConditionalExpression, myConceptDegreesRotate, myConceptDetectSmokeConditionalExpression, myConceptElse, myConceptExceptionalScenario, myConceptExpression, myConceptFlyDirection, myConceptFlyToCoordinates, myConceptFlyToRegion, myConceptGambialCommand, myConceptGimbalConditionalExpression, myConceptGiven, myConceptGpsConditionalExpression, myConceptIf, myConceptIntegerNumber, myConceptLanding, myConceptLandingGearConditionalExpression, myConceptLinearAccelerationConditionalExpression, myConceptLogicalExpression, myConceptMotorsPowerConditionalExpression, myConceptNormalBooleanValue, myConceptNumber, myConceptOnOffSmokeConditionalExpression, myConceptOriginAndDestinationDistanceConditionalExpression, myConceptPayloadConditionalExpression, myConceptPerformingCommandConditionalExpression, myConceptRegionConditionalExpression, myConceptReturnToHome, myConceptSafeLand, myConceptScalarDistanceConditionalExpression, myConceptScalarWindConditionalExpression, myConceptSetAutoFlightSpeed, myConceptSetGoHomeHeightInMeters, myConceptSetHomeLocation, myConceptSetHomeLocationUsingAircraftCurrentLocation, myConceptSetLowBatteryWarningThreshold, myConceptSetMission, myConceptSetSeriousLowBatteryWarningThreshold, myConceptSetSmartReturnToHomeEnabled, myConceptSpeedConditionalExpression, myConceptStatement, myConceptTakeOff, myConceptText, myConceptThen, myConceptTurnAutomaticControl, myConceptTurnCamera, myConceptTurnEconomyMode, myConceptTurnMission, myConceptTurnMotors, myConceptValue, myConceptWhen, myConceptWhile, myConceptWifiConditionalExpression, myConceptWindDirectionConditionalExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AdaptationBehavior:
        return myConceptAdaptationBehavior;
      case LanguageConceptSwitch.AdaptationScript:
        return myConceptAdaptationScript;
      case LanguageConceptSwitch.AltitudeConditionalExpression:
        return myConceptAltitudeConditionalExpression;
      case LanguageConceptSwitch.AngularAccelerationConditionalExpression:
        return myConceptAngularAccelerationConditionalExpression;
      case LanguageConceptSwitch.AnyBoolean:
        return myConceptAnyBoolean;
      case LanguageConceptSwitch.AnyNumber:
        return myConceptAnyNumber;
      case LanguageConceptSwitch.BatteryConditionalExpression:
        return myConceptBatteryConditionalExpression;
      case LanguageConceptSwitch.BooleanValue:
        return myConceptBooleanValue;
      case LanguageConceptSwitch.CameraPowerConditionalExpression:
        return myConceptCameraPowerConditionalExpression;
      case LanguageConceptSwitch.CardinalPointsRotate:
        return myConceptCardinalPointsRotate;
      case LanguageConceptSwitch.CategoricalDistanceConditionalExpression:
        return myConceptCategoricalDistanceConditionalExpression;
      case LanguageConceptSwitch.CategoricalWindConditionalExpression:
        return myConceptCategoricalWindConditionalExpression;
      case LanguageConceptSwitch.CollisionSensorConditionalExpression:
        return myConceptCollisionSensorConditionalExpression;
      case LanguageConceptSwitch.CommandCall:
        return myConceptCommandCall;
      case LanguageConceptSwitch.CompassConditionalExpression:
        return myConceptCompassConditionalExpression;
      case LanguageConceptSwitch.ConditionalExpression:
        return myConceptConditionalExpression;
      case LanguageConceptSwitch.CoordenateConditionalExpression:
        return myConceptCoordenateConditionalExpression;
      case LanguageConceptSwitch.DegreesRotate:
        return myConceptDegreesRotate;
      case LanguageConceptSwitch.DetectSmokeConditionalExpression:
        return myConceptDetectSmokeConditionalExpression;
      case LanguageConceptSwitch.Else:
        return myConceptElse;
      case LanguageConceptSwitch.ExceptionalScenario:
        return myConceptExceptionalScenario;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.FlyDirection:
        return myConceptFlyDirection;
      case LanguageConceptSwitch.FlyToCoordinates:
        return myConceptFlyToCoordinates;
      case LanguageConceptSwitch.FlyToRegion:
        return myConceptFlyToRegion;
      case LanguageConceptSwitch.GambialCommand:
        return myConceptGambialCommand;
      case LanguageConceptSwitch.GimbalConditionalExpression:
        return myConceptGimbalConditionalExpression;
      case LanguageConceptSwitch.Given:
        return myConceptGiven;
      case LanguageConceptSwitch.GpsConditionalExpression:
        return myConceptGpsConditionalExpression;
      case LanguageConceptSwitch.If:
        return myConceptIf;
      case LanguageConceptSwitch.IntegerNumber:
        return myConceptIntegerNumber;
      case LanguageConceptSwitch.Landing:
        return myConceptLanding;
      case LanguageConceptSwitch.LandingGearConditionalExpression:
        return myConceptLandingGearConditionalExpression;
      case LanguageConceptSwitch.LinearAccelerationConditionalExpression:
        return myConceptLinearAccelerationConditionalExpression;
      case LanguageConceptSwitch.LogicalExpression:
        return myConceptLogicalExpression;
      case LanguageConceptSwitch.MotorsPowerConditionalExpression:
        return myConceptMotorsPowerConditionalExpression;
      case LanguageConceptSwitch.NormalBooleanValue:
        return myConceptNormalBooleanValue;
      case LanguageConceptSwitch.Number:
        return myConceptNumber;
      case LanguageConceptSwitch.OnOffSmokeConditionalExpression:
        return myConceptOnOffSmokeConditionalExpression;
      case LanguageConceptSwitch.OriginAndDestinationDistanceConditionalExpression:
        return myConceptOriginAndDestinationDistanceConditionalExpression;
      case LanguageConceptSwitch.PayloadConditionalExpression:
        return myConceptPayloadConditionalExpression;
      case LanguageConceptSwitch.PerformingCommandConditionalExpression:
        return myConceptPerformingCommandConditionalExpression;
      case LanguageConceptSwitch.RegionConditionalExpression:
        return myConceptRegionConditionalExpression;
      case LanguageConceptSwitch.ReturnToHome:
        return myConceptReturnToHome;
      case LanguageConceptSwitch.SafeLand:
        return myConceptSafeLand;
      case LanguageConceptSwitch.ScalarDistanceConditionalExpression:
        return myConceptScalarDistanceConditionalExpression;
      case LanguageConceptSwitch.ScalarWindConditionalExpression:
        return myConceptScalarWindConditionalExpression;
      case LanguageConceptSwitch.SetAutoFlightSpeed:
        return myConceptSetAutoFlightSpeed;
      case LanguageConceptSwitch.SetGoHomeHeightInMeters:
        return myConceptSetGoHomeHeightInMeters;
      case LanguageConceptSwitch.SetHomeLocation:
        return myConceptSetHomeLocation;
      case LanguageConceptSwitch.SetHomeLocationUsingAircraftCurrentLocation:
        return myConceptSetHomeLocationUsingAircraftCurrentLocation;
      case LanguageConceptSwitch.SetLowBatteryWarningThreshold:
        return myConceptSetLowBatteryWarningThreshold;
      case LanguageConceptSwitch.SetMission:
        return myConceptSetMission;
      case LanguageConceptSwitch.SetSeriousLowBatteryWarningThreshold:
        return myConceptSetSeriousLowBatteryWarningThreshold;
      case LanguageConceptSwitch.SetSmartReturnToHomeEnabled:
        return myConceptSetSmartReturnToHomeEnabled;
      case LanguageConceptSwitch.SpeedConditionalExpression:
        return myConceptSpeedConditionalExpression;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.TakeOff:
        return myConceptTakeOff;
      case LanguageConceptSwitch.Text:
        return myConceptText;
      case LanguageConceptSwitch.Then:
        return myConceptThen;
      case LanguageConceptSwitch.TurnAutomaticControl:
        return myConceptTurnAutomaticControl;
      case LanguageConceptSwitch.TurnCamera:
        return myConceptTurnCamera;
      case LanguageConceptSwitch.TurnEconomyMode:
        return myConceptTurnEconomyMode;
      case LanguageConceptSwitch.TurnMission:
        return myConceptTurnMission;
      case LanguageConceptSwitch.TurnMotors:
        return myConceptTurnMotors;
      case LanguageConceptSwitch.Value:
        return myConceptValue;
      case LanguageConceptSwitch.When:
        return myConceptWhen;
      case LanguageConceptSwitch.While:
        return myConceptWhile;
      case LanguageConceptSwitch.WifiConditionalExpression:
        return myConceptWifiConditionalExpression;
      case LanguageConceptSwitch.WindDirectionConditionalExpression:
        return myConceptWindDirectionConditionalExpression;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationAxisEnum, myEnumerationCategoricalDistanceEnum, myEnumerationCategoricalWindEnum, myEnumerationCommandStateEnum, myEnumerationConditionalOperatorEnum, myEnumerationDirectionsEnum, myEnumerationGambialEnum, myEnumerationInaquelityConditionalOperator, myEnumerationInternalStateEnum, myEnumerationIqualityOperatorEnum, myEnumerationLogicalOperatorEnum, myEnumerationRegionEnum, myEnumerationTurnConditionalEnum, myEnumerationTypeOfAdaptationEnum, myEnumerationbooleanDetectionEnum);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAdaptationBehavior() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "AdaptationBehavior", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x4cdb8f81da5c7de7L);
    b.class_(false, false, false);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/5538177954659204583");
    b.version(2);
    b.property("typeOfAdaptation", 0x4cdb8f81da5c7decL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b44a3L)).origin("5538177954659204588").done();
    b.associate("adaptationScriptName", 0x4cdb8f81da5c7df2L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc046e0b54L).optional(false).origin("5538177954659204594").done();
    b.aggregate("adaptationScript", 0x4cdb8f81da5c7e5cL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc046e0b54L).optional(false).ordered(true).multiple(false).origin("5538177954659204700").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAdaptationScript() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "AdaptationScript", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc046e0b54L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596691614548");
    b.version(2);
    b.aggregate("body", 0x53be3ecc0480a64aL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL).optional(true).ordered(true).multiple(true).origin("6034329596692833866").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAltitudeConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "AltitudeConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8ac3a37L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449926900279");
    b.version(2);
    b.property("operators", 0x1053550ed8ac3a38L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("1176377449926900280").done();
    b.aggregate("right", 0x1053550ed8ac3a3aL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL).optional(false).ordered(true).multiple(false).origin("1176377449926900282").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAngularAccelerationConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "AngularAccelerationConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1e50d2b0bcf0f56aL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/2184477475800675690");
    b.version(2);
    b.property("left", 0x3004f1bb9b11a30eL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3004f1bb9b11a311L)).origin("3460156201790186254").done();
    b.property("operator", 0x1e50d2b0bcf0f56dL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("2184477475800675693").done();
    b.aggregate("right", 0x1e50d2b0bcf0f571L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL).optional(false).ordered(true).multiple(false).origin("2184477475800675697").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAnyBoolean() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "AnyBoolean", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986203ca079L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.BooleanValue", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986203ca061L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779906715769");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAnyNumber() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "AnyNumber", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdadL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.Number", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779906477485");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBatteryConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "BatteryConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc04699240L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596691321408");
    b.version(2);
    b.property("operator", 0x7970d3ea9334a569L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("8750727080426382697").done();
    b.aggregate("left", 0x7970d3ea93320930L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3feL).optional(false).ordered(true).multiple(false).origin("8750727080426211632").done();
    b.aggregate("right", 0x7970d3ea93320932L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL).optional(false).ordered(true).multiple(false).origin("8750727080426211634").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "BooleanValue", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986203ca061L);
    b.class_(false, true, false);
    b.super_("WrapperDSL.structure.Value", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779906715745");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCameraPowerConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CameraPowerConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b71613L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449927611923");
    b.version(2);
    b.property("operators", 0x1053550ed8b71615L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("1176377449927611925").done();
    b.property("right", 0x1053550ed8b71616L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("1176377449927611926").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCardinalPointsRotate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CardinalPointsRotate", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0xba2c69738711b6bL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/838450833433631595");
    b.version(2);
    b.property("cardialPoint", 0xba2c69738711b7aL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8a37db5L)).origin("838450833433631610").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCategoricalDistanceConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CategoricalDistanceConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea933febfdL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8750727080427121661");
    b.version(2);
    b.property("operator", 0x7970d3ea933fec00L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("8750727080427121664").done();
    b.property("right", 0x7970d3ea933fec09L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea933fec04L)).origin("8750727080427121673").done();
    b.property("left", 0x7970d3ea933fec0cL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea933fec04L)).origin("8750727080427121676").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCategoricalWindConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CategoricalWindConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8cddL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336989");
    b.version(2);
    b.property("operator", 0x7970d3ea9334a572L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("8750727080426382706").done();
    b.property("right", 0x7970d3ea9335d497L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9335d47aL)).origin("8750727080426460311").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCollisionSensorConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CollisionSensorConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202aaa71L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779905538673");
    b.version(2);
    b.property("operators", 0x3069a986202aaa74L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("3488505779905538676").done();
    b.property("right", 0x3069a986202aaa75L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("3488505779905538677").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommandCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.class_(false, true, false);
    b.super_("WrapperDSL.structure.Statement", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429675304");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCompassConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CompassConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3f0a90391eda7f7L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/283912609322608631");
    b.version(2);
    b.property("operators", 0x3f0a90391eda7faL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("283912609322608634").done();
    b.property("right", 0x1053550ed8a37de3L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8a37db5L)).origin("1176377449926327779").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "ConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.interface_();
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8750727080426030587");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCoordenateConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "CoordenateConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8ce3L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336995");
    b.version(2);
    b.property("lat", 0xba2c6973888ec78L).type(PrimitiveTypeId.INTEGER).origin("838450833435192440").done();
    b.property("log", 0xba2c6973888ec7aL).type(PrimitiveTypeId.INTEGER).origin("838450833435192442").done();
    b.property("operator", 0xba2c6973888ec8eL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("838450833435192462").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDegreesRotate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "DegreesRotate", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0xba2c69738711b3aL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/838450833433631546");
    b.version(2);
    b.aggregate("value", 0x3069a986203ca046L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("3488505779906715718").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDetectSmokeConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "DetectSmokeConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862031a5b2L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779905996210");
    b.version(2);
    b.property("operators", 0x3069a9862031a5b5L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("3488505779905996213").done();
    b.property("right", 0x3069a9862031a5b6L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862031a5baL)).origin("3488505779905996214").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForElse() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Else", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x21327745460a73e5L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.Statement", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/2392105491498693605");
    b.version(2);
    b.aggregate("body", 0x21327745460a73e7L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL).optional(true).ordered(true).multiple(true).origin("2392105491498693607").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExceptionalScenario() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "ExceptionalScenario", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bc3L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336707");
    b.version(2);
    b.aggregate("given", 0x53be3ecc045a8bcdL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcaL).optional(false).ordered(true).multiple(false).origin("6034329596690336717").done();
    b.aggregate("when", 0x53be3ecc045a8bcfL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcbL).optional(false).ordered(true).multiple(false).origin("6034329596690336719").done();
    b.aggregate("then", 0x53be3ecc045a8bd2L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bccL).optional(false).ordered(true).multiple(false).origin("6034329596690336722").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Expression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL);
    b.interface_();
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8750727080426002237");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFlyDirection() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "FlyDirection", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202e1f01L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779905765121");
    b.version(2);
    b.property("direc", 0x3069a986202e1f02L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8a37db5L)).origin("3488505779905765122").done();
    b.aggregate("distance", 0x3069a986203ca04cL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("3488505779906715724").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFlyToCoordinates() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "FlyToCoordinates", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0xba2c69738711bbdL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/838450833433631677");
    b.version(2);
    b.aggregate("lat", 0x3069a986203ca04fL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("3488505779906715727").done();
    b.aggregate("long", 0x3069a986203ca055L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("3488505779906715733").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFlyToRegion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "FlyToRegion", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0xba2c69738711bf2L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/838450833433631730");
    b.version(2);
    b.property("region", 0xba2c69738711c07L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x72508e21f03ae4a3L)).origin("838450833433631751").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGambialCommand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "GambialCommand", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x2132774545f60a0bL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/2392105491497355787");
    b.version(2);
    b.property("value", 0x2132774545f60a0cL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x2132774545f60a45L)).origin("2392105491497355788").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGimbalConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "GimbalConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b71646L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449927611974");
    b.version(2);
    b.property("operators", 0x1053550ed8b71648L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("1176377449927611976").done();
    b.property("right", 0x1053550ed8b71649L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("1176377449927611977").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGiven() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Given", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcaL);
    b.class_(false, false, false);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336714");
    b.version(2);
    b.aggregate("expression", 0x53be3ecc045b453aL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL).optional(false).ordered(true).multiple(false).origin("6034329596690384186").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGpsConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "GpsConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x2132774545f3d37cL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/2392105491497210748");
    b.version(2);
    b.property("operators", 0x2132774545f3d37fL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("2392105491497210751").done();
    b.property("right", 0x2132774545f3d380L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("2392105491497210752").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "If", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b45abL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.Statement", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690384299");
    b.version(2);
    b.aggregate("condition", 0x53be3ecc045b4670L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL).optional(false).ordered(true).multiple(false).origin("6034329596690384496").done();
    b.aggregate("body", 0x53be3ecc045b4672L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL).optional(true).ordered(true).multiple(true).origin("6034329596690384498").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerNumber() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "IntegerNumber", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.Number", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779906477482");
    b.version(2);
    b.property("value", 0x3069a9862038fdabL).type(PrimitiveTypeId.INTEGER).origin("3488505779906477483").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLanding() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Landing", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd93589596498L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429898392");
    b.version(2);
    b.property("value", 0x12d7700560f441ddL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("1357676981079261661").done();
    b.alias("Landing");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLandingGearConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "LandingGearConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b3fbfaL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449927408634");
    b.version(2);
    b.property("operators", 0x1053550ed8b3fbfcL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("1176377449927408636").done();
    b.property("right", 0x1053550ed8b3fbfdL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("1176377449927408637").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLinearAccelerationConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "LinearAccelerationConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3004f1bb9b15123cL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3460156201790411324");
    b.version(2);
    b.property("left", 0x3004f1bb9b15124bL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3004f1bb9b11a311L)).origin("3460156201790411339").done();
    b.property("operator", 0x3004f1bb9b15124dL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("3460156201790411341").done();
    b.aggregate("right", 0x3004f1bb9b151250L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL).optional(false).ordered(true).multiple(false).origin("3460156201790411344").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "LogicalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97fbL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8750727080426179938");
    b.version(2);
    b.property("operator", 0x7970d3ea932f45f9L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL)).origin("8750727080426030585").done();
    b.aggregate("left", 0x7970d3ea93318d65L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL).optional(false).ordered(true).multiple(false).origin("8750727080426179941").done();
    b.aggregate("right", 0x7970d3ea93318d66L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL).optional(false).ordered(true).multiple(false).origin("8750727080426179942").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMotorsPowerConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "MotorsPowerConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a3L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449927319715");
    b.version(2);
    b.property("operators", 0x1053550ed8b2a0adL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("1176377449927319725").done();
    b.property("right", 0x1053550ed8b2a0afL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("1176377449927319727").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNormalBooleanValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "NormalBooleanValue", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986203ca062L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.BooleanValue", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986203ca061L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779906715746");
    b.version(2);
    b.property("value", 0x3069a986203ca063L).type(PrimitiveTypeId.BOOLEAN).origin("3488505779906715747").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumber() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Number", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L);
    b.class_(false, true, false);
    b.super_("WrapperDSL.structure.Value", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779906477481");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOnOffSmokeConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "OnOffSmokeConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862031a595L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779905996181");
    b.version(2);
    b.property("operators", 0x3069a9862031a598L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("3488505779905996184").done();
    b.property("right", 0x3069a9862031a599L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("3488505779905996185").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOriginAndDestinationDistanceConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "OriginAndDestinationDistanceConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x72508e21f03ced43L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8237239994876226883");
    b.version(2);
    b.property("left", 0x72508e21f03ced46L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea933fec04L)).origin("8237239994876226886").done();
    b.property("operator", 0x72508e21f03ced48L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("8237239994876226888").done();
    b.aggregate("right1", 0x72508e21f03ced4bL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL).optional(false).ordered(true).multiple(false).origin("8237239994876226891").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPayloadConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "PayloadConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b3fc74L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449927408756");
    b.version(2);
    b.property("operators", 0x1053550ed8b3fc76L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("1176377449927408758").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPerformingCommandConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "PerformingCommandConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x78c933fd429ad1d9L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8703544917707379161");
    b.version(2);
    b.property("operation", 0x78c933fd429ad203L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("8703544917707379203").done();
    b.aggregate("perfomingCommand", 0x78c933fd429ad1daL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L).optional(false).ordered(true).multiple(false).origin("8703544917707379162").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegionConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "RegionConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8ce0L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336992");
    b.version(2);
    b.property("right", 0x72508e21f03ae4a8L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x72508e21f03ae4a3L)).origin("8237239994876093608").done();
    b.property("operator", 0x72508e21f03ae4c4L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("8237239994876093636").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReturnToHome() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "ReturnToHome", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895a950aL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429976330");
    b.version(2);
    b.property("value", 0x12d7700560f44228L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("1357676981079261736").done();
    b.alias("ReturnToHome");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSafeLand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SafeLand", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x4f78da14d91a0524L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/5726566709278147876");
    b.version(2);
    b.property("value", 0x12d7700560f441ecL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("1357676981079261676").done();
    b.alias("safe land");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScalarDistanceConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "ScalarDistanceConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc048c5944L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596693600580");
    b.version(2);
    b.property("operator", 0x7970d3ea9341d077L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("8750727080427245687").done();
    b.property("left", 0x7970d3ea9341d079L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea933fec04L)).origin("8750727080427245689").done();
    b.aggregate("right", 0x7970d3ea9341d07fL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL).optional(false).ordered(true).multiple(false).origin("8750727080427245695").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScalarWindConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "ScalarWindConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea93368919L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/8750727080426506521");
    b.version(2);
    b.property("operator", 0x7970d3ea93368922L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("8750727080426506530").done();
    b.aggregate("left", 0x7970d3ea9336891aL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3feL).optional(false).ordered(true).multiple(false).origin("8750727080426506522").done();
    b.aggregate("right", 0x7970d3ea9336891dL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL).optional(false).ordered(true).multiple(false).origin("8750727080426506525").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetAutoFlightSpeed() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetAutoFlightSpeed", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895bcbe8L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689430055912");
    b.version(2);
    b.aggregate("speed", 0x6e9fd935895bcc06L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("7971328689430055942").done();
    b.alias("set Auto Flight Speed");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetGoHomeHeightInMeters() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetGoHomeHeightInMeters", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895a955bL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429976411");
    b.version(2);
    b.aggregate("height", 0x6e9fd935895a956fL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("7971328689429976431").done();
    b.alias("Set Go Home Height In Meters");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetHomeLocation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetHomeLocation", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd93589583f6bL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429823339");
    b.version(2);
    b.aggregate("long", 0x6e9fd93589583f73L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("7971328689429823347").done();
    b.aggregate("lat", 0x6e9fd93589583f6eL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("7971328689429823342").done();
    b.alias("set Home Location");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetHomeLocationUsingAircraftCurrentLocation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetHomeLocationUsingAircraftCurrentLocation", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895a9540L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429976384");
    b.version(2);
    b.property("value", 0x1d359d659855d444L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("2104761460538594372").done();
    b.alias("setHomeLocationUsingAircraftCurrentLocation");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetLowBatteryWarningThreshold() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetLowBatteryWarningThreshold", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895bcacfL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689430055631");
    b.version(2);
    b.aggregate("percent", 0x6e9fd935895bcaeeL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fda9L).optional(false).ordered(true).multiple(false).origin("7971328689430055662").done();
    b.alias("set Low Battery Warning Threshold");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetMission() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetMission", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1d2871459dd7639bL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/2101053769983157147");
    b.version(2);
    b.aggregate("values", 0x1d2871459dd7639cL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202e1f01L).optional(false).ordered(true).multiple(true).origin("2101053769983157148").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetSeriousLowBatteryWarningThreshold() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetSeriousLowBatteryWarningThreshold", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895bcb00L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689430055680");
    b.version(2);
    b.aggregate("percent", 0x6e9fd935895bcb01L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862038fdaaL).optional(false).ordered(true).multiple(false).origin("7971328689430055681").done();
    b.alias("set Serious Low Battery Warning Threshold");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetSmartReturnToHomeEnabled() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SetSmartReturnToHomeEnabled", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895bcb3cL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689430055740");
    b.version(2);
    b.property("enable", 0x6e9fd935895bcb3fL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("7971328689430055743").done();
    b.alias("set Smart Return To Home Enabled");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpeedConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "SpeedConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3f0a90391ea8938L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/283912609322404152");
    b.version(2);
    b.property("operator", 0x3f0a90391ea8971L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932f45ebL)).origin("283912609322404209").done();
    b.aggregate("right", 0x3f0a90391ea896fL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL).optional(false).ordered(true).multiple(false).origin("283912609322404207").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Statement", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL);
    b.class_(false, true, false);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690384188");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTakeOff() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "TakeOff", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd93589596447L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429898311");
    b.version(2);
    b.property("value", 0x12d7700560f02104L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("1357676981078991108").done();
    b.alias("TakeOff");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForText() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Text", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3feL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.Value", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690879486");
    b.version(2);
    b.property("value", 0x53be3ecc0462d3ffL).type(PrimitiveTypeId.STRING).origin("6034329596690879487").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThen() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Then", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bccL);
    b.class_(false, false, false);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336716");
    b.version(2);
    b.aggregate("adaptiveBehavior", 0x53be3ecc045b45a9L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x4cdb8f81da5c7de7L).optional(false).ordered(true).multiple(false).origin("6034329596690384297").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTurnAutomaticControl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "TurnAutomaticControl", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862023e337L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779905094455");
    b.version(2);
    b.property("value", 0x3069a9862023e33aL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("3488505779905094458").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTurnCamera() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "TurnCamera", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x2132774545f609daL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/2392105491497355738");
    b.version(2);
    b.property("turn", 0x2132774545f609dbL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("2392105491497355739").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTurnEconomyMode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "TurnEconomyMode", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f0203eL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1357676981078990910");
    b.version(2);
    b.property("value", 0x12d7700560f0203fL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("1357676981078990911").done();
    b.alias("setEconomicMode");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTurnMission() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "TurnMission", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd935895bcb74L);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689430055796");
    b.version(2);
    b.property("value", 0x12d7700560f44212L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x12d7700560f441d4L)).origin("1357676981079261714").done();
    b.alias("mission");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTurnMotors() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "TurnMotors", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358959640bL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.CommandCall", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/7971328689429898251");
    b.version(2);
    b.aggregate("value", 0x3069a986203ca05fL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986203ca061L).optional(false).ordered(true).multiple(false).origin("3488505779906715743").done();
    b.alias("turnOnMotors");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "Value", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL);
    b.class_(false, true, false);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690879483");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhen() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "When", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcbL);
    b.class_(false, false, false);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690336715");
    b.version(2);
    b.aggregate("event", 0x4cdb8f81da5c7dbcL).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x6e9fd9358955fd28L).optional(false).ordered(true).multiple(false).origin("5538177954659204540").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "While", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b45acL);
    b.class_(false, false, false);
    b.super_("WrapperDSL.structure.Statement", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/6034329596690384300");
    b.version(2);
    b.aggregate("condition", 0x53be3ecc045b45d2L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932ed73dL).optional(false).ordered(true).multiple(false).origin("6034329596690384338").done();
    b.aggregate("body", 0x53be3ecc045b45d4L).target(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b453cL).optional(true).ordered(true).multiple(true).origin("6034329596690384340").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWifiConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "WifiConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b3fc39L);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/1176377449927408697");
    b.version(2);
    b.property("operators", 0x1053550ed8b3fc3bL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("1176377449927408699").done();
    b.property("right", 0x1053550ed8b3fc3cL).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8b2a0a8L)).origin("1176377449927408700").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWindDirectionConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WrapperDSL", "WindDirectionConditionalExpression", 0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202089cdL);
    b.class_(false, false, false);
    b.parent(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97ffL);
    b.origin("r:791815a7-51ee-4ec9-bcc3-2de9ba0316d3(WrapperDSL.structure)/3488505779904874957");
    b.version(2);
    b.property("value", 0x4cfe09885e9616a4L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1053550ed8a37db5L)).origin("5547882272274126500").done();
    b.property("operator", 0x3069a986202089f0L).type(MetaIdFactory.dataTypeId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea9334065dL)).origin("3488505779904874992").done();
    return b.create();
  }
}
