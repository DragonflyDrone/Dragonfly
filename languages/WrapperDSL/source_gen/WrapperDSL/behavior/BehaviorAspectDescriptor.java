package WrapperDSL.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myDistanceConstant__BehaviorDescriptor = new DistanceConstant__BehaviorDescriptor();
  private final BHDescriptor myConjuctionLogicalExpression__BehaviorDescriptor = new ConjuctionLogicalExpression__BehaviorDescriptor();
  private final BHDescriptor myDisjuctionNormalExpression__BehaviorDescriptor = new DisjuctionNormalExpression__BehaviorDescriptor();
  private final BHDescriptor myWindSensorExpression__BehaviorDescriptor = new WindSensorExpression__BehaviorDescriptor();
  private final BHDescriptor myRegionSensorExpression__BehaviorDescriptor = new RegionSensorExpression__BehaviorDescriptor();
  private final BHDescriptor myBatterySensorExpression__BehaviorDescriptor = new BatterySensorExpression__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBatterySensorExpression__BehaviorDescriptor;
      case 1:
        return myConjuctionLogicalExpression__BehaviorDescriptor;
      case 2:
        return myDisjuctionNormalExpression__BehaviorDescriptor;
      case 3:
        return myDistanceConstant__BehaviorDescriptor;
      case 4:
        return myRegionSensorExpression__BehaviorDescriptor;
      case 5:
        return myWindSensorExpression__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc04699240L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8c9bL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8c9cL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x1ddd50fab11e853fL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8ce0L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8cddL)).seal();
}
