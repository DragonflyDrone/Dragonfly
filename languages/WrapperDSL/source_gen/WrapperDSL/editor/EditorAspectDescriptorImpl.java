package WrapperDSL.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AccelerationModeConditionalExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AccelerometerStateCommandExpression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AccelerometerStateConditionalExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AccelerometerStateTriggerEvent_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new AdaptationBehavior_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new AdaptationScript_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new AnemometrerStateCommandExpression_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new AnemometrerStateConditionalExpression_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new AnemometrerStateTriggerEvent_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new AnyInteger_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new BarometerStateCommandExpression_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new BarometerStateConditionalExpression_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new BarometerStateTriggerEvent_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new BatteryCapacityConditionalExpression_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new BatteryCurrentConditionalExpression_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new BatteryPercentageConditionalExpression_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new BatteryStateConditionalExpression_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new BatteryVoltageConditionalExpression_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new CameraFocusPointConditionalExpression_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new CameraFocuslPointCommandExpression_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new CameraFocuslPointTriggerEvent_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new CameraStateCommandExpression_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new CameraStateConditionalExpression_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new CameraStateTriggerEvent_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new ComparativeRelativeDistanceConditionalExpression_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new CompassStateCommandExpression_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new CompassStateConditionalExpression_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new CompassStateTriggerEvent_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Else_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new EmergencyStopModeStateCommandExpression_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new EmergencyStopModeStateConditionaExpression_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new EmergencyStopModeStateTriggerEvent_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeLowWarningCommandExpression_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeLowWarningConditionalExpression_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeStateCommandExpression_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeStateConditionalExpression_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeStateTriggerEvent_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeVeryLowWarningCommandExpression_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new EnergySavingModeVeryLowWarningConditionalExpression_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new ExceptionalScenario_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new FlightControlStateCommandExpression_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new FlightControlStateConditionalExpression_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new FlightControlStateTriggerEvent_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new FlightStatusStateConditionalExpression_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new GPSSensorResultConditionalExpression_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new GPSStateCommandExpression_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new GPSStateConditionalExpression_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new GPSStateTriggerEvent_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new GimbalRotationCommandExpression_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new GimbalRotationConditionalExpression_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new GimbalRotationTriggerEvent_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new GimbalStateCommand_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new GimbalStateConditionalExpression_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new GimbalStateTriggerEvent_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new Given_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new GyroscopeStateCommandExpression_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new GyroscopeStateConditionalExpression_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new GyroscopeStateTriggerEvent_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new HumidityLevelConditionalExpression_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new HygrometerStateCommandExpression_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new HygrometerStateConditionalExpression_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new HygrometerStateTriggerEvent_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new IMUStateCommandExpression_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new IMUStateConditionalExpression_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new IMUStateTriggerEvent_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new If_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new LandingStateCommandExpression_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new LandingStateConditionalExpression_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new LandingStateStateTrigger_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new LandinggearStateCommandExpression_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new LandinggearStateConditionalExpression_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new LandinggearStateTriggerEvent_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new LightStatusStateCommandExpression_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new LightStatusStateConditionalExpression_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new LightStatusStateTriggerEvent_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new LogicalExpression_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new MagnetometerStateCommandExpression_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new MagnetometerStateConditionalExpression_Editor());
      case 78:
        return Collections.<ConceptEditor>singletonList(new MagnetometerStateTriggerEvent_Editor());
      case 79:
        return Collections.<ConceptEditor>singletonList(new MissionStateCommandExpression_Editor());
      case 80:
        return Collections.<ConceptEditor>singletonList(new MissionStateConditionalExpression_Editor());
      case 81:
        return Collections.<ConceptEditor>singletonList(new MissionStateTriggerEvent_Editor());
      case 82:
        return Collections.<ConceptEditor>singletonList(new MissionWayPointsCommandExpression_Editor());
      case 83:
        return Collections.<ConceptEditor>singletonList(new MissionWayPointsConditionalExpression_Editor());
      case 84:
        return Collections.<ConceptEditor>singletonList(new ObstacleAvoidanceSensorResultConditionalExpression_Editor());
      case 85:
        return Collections.<ConceptEditor>singletonList(new ObstacleAvoidanceSensorStateCommandExpression_Editor());
      case 86:
        return Collections.<ConceptEditor>singletonList(new ObstacleAvoidanceSensorStateConditionalExpression_Editor());
      case 87:
        return Collections.<ConceptEditor>singletonList(new ObstacleAvoidanceSensorStateTriggerEvent_Editor());
      case 88:
        return Collections.<ConceptEditor>singletonList(new PayloadStateCommandExpression_Editor());
      case 89:
        return Collections.<ConceptEditor>singletonList(new PayloadStateConditionalExpression_Editor());
      case 90:
        return Collections.<ConceptEditor>singletonList(new PayloadStateTriggerEvent_Editor());
      case 91:
        return Collections.<ConceptEditor>singletonList(new Point_Editor());
      case 92:
        return Collections.<ConceptEditor>singletonList(new PointTriggerEvent_Editor());
      case 93:
        return Collections.<ConceptEditor>singletonList(new RegionConditionalExpression_Editor());
      case 94:
        return Collections.<ConceptEditor>singletonList(new RelativeDistanceConditionalExpression_Editor());
      case 95:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeHomePointCommandExpression_Editor());
      case 96:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeHomePointConditionalExpression_Editor());
      case 97:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeHomePointCurrentPositionCommandExpression_Editor());
      case 98:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeHomePointTriggerEvent_Editor());
      case 99:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeStateCommandExpression_Editor());
      case 100:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeStateConditionalExpression_Editor());
      case 101:
        return Collections.<ConceptEditor>singletonList(new ReturnToHomeStateTriggerEvent_Editor());
      case 102:
        return Collections.<ConceptEditor>singletonList(new SafeLandingStateCommandExpression_Editor());
      case 103:
        return Collections.<ConceptEditor>singletonList(new SafeLandingStateConditionalExpression_Editor());
      case 104:
        return Collections.<ConceptEditor>singletonList(new SafeLandingStateTriggerEvent_Editor());
      case 105:
        return Collections.<ConceptEditor>singletonList(new ScalarDistanceConditionalExpression_Editor());
      case 106:
        return Collections.<ConceptEditor>singletonList(new SmokerDetectorResultConditionalExpression_Editor());
      case 107:
        return Collections.<ConceptEditor>singletonList(new SmokerDetectorStateCommandExpression_Editor());
      case 108:
        return Collections.<ConceptEditor>singletonList(new SmokerDetectorStateConditionalExpression_Editor());
      case 109:
        return Collections.<ConceptEditor>singletonList(new SmokerDetectorTriggerEvent_Editor());
      case 110:
        return Collections.<ConceptEditor>singletonList(new TakeOffStateCommandExpression_Editor());
      case 111:
        return Collections.<ConceptEditor>singletonList(new TakeOffStateConditionalExpression_Editor());
      case 112:
        return Collections.<ConceptEditor>singletonList(new TakeOffStateTriggerEvent_Editor());
      case 113:
        return Collections.<ConceptEditor>singletonList(new TemperatureLevelConditionalExpression_Editor());
      case 114:
        return Collections.<ConceptEditor>singletonList(new Then_Editor());
      case 115:
        return Collections.<ConceptEditor>singletonList(new ThermometerStateCommand_Editor());
      case 116:
        return Collections.<ConceptEditor>singletonList(new ThermometerStateConditionalExpression_Editor());
      case 117:
        return Collections.<ConceptEditor>singletonList(new ThermometerStateTriggerEvent_Editor());
      case 118:
        return Collections.<ConceptEditor>singletonList(new UAVAccelerationCommandExpression_Editor());
      case 119:
        return Collections.<ConceptEditor>singletonList(new UAVAccelerationConditionalExpression_Editor());
      case 120:
        return Collections.<ConceptEditor>singletonList(new UAVAccelerationModeCommandExpression_Editor());
      case 121:
        return Collections.<ConceptEditor>singletonList(new UAVAccelerationTriggerEvent_Editor());
      case 122:
        return Collections.<ConceptEditor>singletonList(new UAVAltitudeCommandExpression_Editor());
      case 123:
        return Collections.<ConceptEditor>singletonList(new UAVAltitudeConditionalExpression_Editor());
      case 124:
        return Collections.<ConceptEditor>singletonList(new UAVAltitudeTriggerEvent_Editor());
      case 125:
        return Collections.<ConceptEditor>singletonList(new UAVCurrentPositionConditionalExpression_Editor());
      case 126:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionCommandExpression_Editor());
      case 127:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionConditionalExpression_Editor());
      case 128:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionToRegionCommandExpression_Editor());
      case 129:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionToRegionConditionalExpression_Editor());
      case 130:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionTriggerEvent_Editor());
      case 131:
        return Collections.<ConceptEditor>singletonList(new UAVMotorCommandExpression_Editor());
      case 132:
        return Collections.<ConceptEditor>singletonList(new UAVMotorConditionalExpression_Editor());
      case 133:
        return Collections.<ConceptEditor>singletonList(new UAVMotorTriggerEvent_Editor());
      case 134:
        return Collections.<ConceptEditor>singletonList(new UAVRotateCommandExpression_Editor());
      case 135:
        return Collections.<ConceptEditor>singletonList(new UAVRotateConditionalExpression_Editor());
      case 136:
        return Collections.<ConceptEditor>singletonList(new UAVRotateTriggerEvent_Editor());
      case 137:
        return Collections.<ConceptEditor>singletonList(new UAVSpeedCommandExpression_Editor());
      case 138:
        return Collections.<ConceptEditor>singletonList(new UAVSpeedConditionalExpression_Editor());
      case 139:
        return Collections.<ConceptEditor>singletonList(new UAVSpeedModeCommandExpression_Editor());
      case 140:
        return Collections.<ConceptEditor>singletonList(new UAVSpeedModeConditionalExpression_Editor());
      case 141:
        return Collections.<ConceptEditor>singletonList(new UAVSpeedTriggerEvent_Editor());
      case 142:
        return Collections.<ConceptEditor>singletonList(new When_Editor());
      case 143:
        return Collections.<ConceptEditor>singletonList(new While_Editor());
      case 144:
        return Collections.<ConceptEditor>singletonList(new WindDirectionConditionalExpression_Editor());
      case 145:
        return Collections.<ConceptEditor>singletonList(new WindSpeedConditionalExpression_Editor());
      case 146:
        return Collections.<ConceptEditor>singletonList(new integer_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AdaptationBehavior_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9ccL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16433aL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc0L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x4cdb8f81da5c7de7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc046e0b54L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ed4a1L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16434aL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbcbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x11de48ed5d7ee280L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9eaL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16433eL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164330L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164332L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164333L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164334L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164331L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16432eL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9dbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbbbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9daL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16432dL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbbaL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164337L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e8L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16433cL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc3L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x21327745460a73e5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ed4a2L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16434bL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbccL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d2L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164324L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d4L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164326L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb3L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d3L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164325L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bc3L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d8L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16432aL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164343L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7fd8262c2025d6deL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e3L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164335L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbbdL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d9L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16432bL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb8L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7fd8262c202614e1L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16432cL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb9L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcaL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16433bL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc1L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164340L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9ebL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16433fL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164339L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbbfL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b45abL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164328L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185eca06L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164345L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbcaL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185eca05L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164344L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc9L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7970d3ea932a97fbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e9L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16433dL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc4L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9ceL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164321L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb0L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9cdL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164320L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7fd8262c2025d766L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9e4L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164338L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbbeL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9dcL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef16432fL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbbcL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cfe9L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x11de48ed5d7ee2dbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8ce0L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164336L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9cfL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164322L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d0L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb1L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d1L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164323L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb2L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164327L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb4L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc048c5944L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x7fd8262c2025d93cL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a9862031a5b2L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9ecL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x11de48ed5d7ee1e6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9d7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164329L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbb6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164342L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bccL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc8L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164341L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbc7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef1642e6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c8L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbadL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c9L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef1642e7L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbaeL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cd40L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c2L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef155ad6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c3L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ab8cfL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbaaL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9caL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ab8b1L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbafL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c4L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef1642e4L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbabL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef1642e5L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9c6L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x802ab50185ec9cbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x341ddc0f5796cbacL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcbL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b45acL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202089cdL), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164346L), MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x11de48ed5d7ee26aL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x4cdb8f81da5c7de7L)).seal();
}
