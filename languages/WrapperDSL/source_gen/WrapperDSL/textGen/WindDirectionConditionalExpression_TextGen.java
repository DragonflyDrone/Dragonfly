package WrapperDSL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class WindDirectionConditionalExpression_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("((Drone)thisJoinPoint.getArgs()[0]).getWindDirection()");
    transformationOperations.transformOperator(SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.operator$X1Ne).getName(), ctx);
    tgs.append("DirectionEnum.");
    tgs.append(SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.value$Bl0_).toString().toUpperCase());
  }

  private static final class PROPS {
    /*package*/ static final SProperty operator$X1Ne = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202089cdL, 0x3069a986202089f0L, "operator");
    /*package*/ static final SProperty value$Bl0_ = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x3069a986202089cdL, 0x4cfe09885e9616a4L, "value");
  }
}
