package WrapperDSL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public abstract class WrapperFile {
  public static void importsOperation(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("package wrappers;");
    tgs.newLine();
    tgs.append("import controller.DroneController;");
    tgs.newLine();
    tgs.append("import controller.EnvironmentController;");
    tgs.newLine();
    tgs.append("import controller.LoggerController;");
    tgs.newLine();
    tgs.append("import javafx.application.Platform;");
    tgs.newLine();
    tgs.append("import javafx.concurrent.Task;");
    tgs.newLine();
    tgs.append("import model.entity.drone.Drone;");
    tgs.newLine();
    tgs.append("import model.entity.drone.DroneBusinessObject;");
    tgs.newLine();
    tgs.append("import org.aspectj.lang.JoinPoint;");
    tgs.newLine();
    tgs.append("import view.CellView;");
    tgs.newLine();
    tgs.append("import view.drone.DroneView;");
    tgs.newLine();
    tgs.append("import view.river.RiverView;");
    tgs.newLine();
    tgs.newLine();
    tgs.newLine();
    tgs.append("import java.util.ArrayList;");
    tgs.newLine();
    tgs.append("import java.util.List;");
    tgs.newLine();
  }
  public static void headerOperation(String nameWrapper, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("public aspect ");
    tgs.append(nameWrapper);
  }
  public static void pointcutsOperation(List<SNode> pointCutList, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    for (SNode pointCut : ListSequence.fromList(pointCutList)) {
      tgs.append("pointcut");
      tgs.append(" ");
      WrapperFile.callToMethedOperation(SEnumOperations.getMemberName0(SPropertyOperations.getEnum(pointCut, PROPS.call$26oK)), "", ctx);
      tgs.append(":");
      tgs.append("call");
      tgs.append("(");
      tgs.append("* model.entity.drone.DroneBusinessObject.");
      WrapperFile.callToMethedOperation(SEnumOperations.getMemberName0(SPropertyOperations.getEnum(pointCut, PROPS.call$26oK)), "*", ctx);
      tgs.append(")");
      tgs.newLine();
    }
  }
  public static void callToMethedOperation(String callName, String param, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append(callName);
    tgs.append("(");
    tgs.append(param);
    tgs.append(")");
  }
  public static void mappingOperationForSignOperation(SEnumerationLiteral operationEnum, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045a8c3dL, "is"))) {
      tgs.append("==");

    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045a8c43L, "not_equal_to"))) {
      tgs.append("!=");
    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045a8c46L, "less_than"))) {
      tgs.append("<");
    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045a8c4aL, "greater_than"))) {
      tgs.append(">");
    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045a8c55L, "less_than_or_equal_to"))) {
      tgs.append("<=");
    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045a8c4fL, "greater_than_or_equal_to"))) {
      tgs.append(">=");
    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045d42a9L, "and"))) {
      tgs.append("&&");
    } else if (SEnumOperations.getMemberName0(operationEnum) == SEnumOperations.getMemberName0(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bdfL, "WrapperDSL.structure.OperationEnum"), 0x53be3ecc045d42b1L, "or"))) {
      tgs.append("||");
    }


  }
  public static void regionSensorExpressionOperation(SNode regionSensorExpression, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append(SPropertyOperations.getEnum(regionSensorExpression, PROPS.left$EP9q).getName());
    WrapperFile.mappingOperationForSignOperation(SPropertyOperations.getEnum(regionSensorExpression, PROPS.operation$6pQJ), ctx);
    tgs.append(SPropertyOperations.getEnum(regionSensorExpression, PROPS.right$BLaw).getName());
  }
  public static void distanceSensorExpressionOperation(SNode distanceSensorExpression, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append(SPropertyOperations.getEnum(distanceSensorExpression, PROPS.left$EP9q).getName());
    WrapperFile.mappingOperationForSignOperation(SPropertyOperations.getEnum(distanceSensorExpression, PROPS.operation$6pQJ), ctx);
    tgs.append(String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(distanceSensorExpression, LINKS.distance$98Dw), PROPS.value$QRR0)));
  }
  public static void disjuctionNormalExpressionOperation(SNode disjuctionNormalExpression, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("test");

    tgs.appendNode(SLinkOperations.getTarget(disjuctionNormalExpression, LINKS.left$BwFB));
    WrapperFile.mappingOperationForSignOperation(SPropertyOperations.getEnum(disjuctionNormalExpression, PROPS.operation$BCG5), ctx);
    tgs.appendNode(SLinkOperations.getTarget(disjuctionNormalExpression, LINKS.right$BwED));
  }
  public static void conjuctionNormalExpressionOperation(SNode conjuctionLogicalExpression, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("test");
    tgs.appendNode(SLinkOperations.getTarget(conjuctionLogicalExpression, LINKS.left$BwFB));
    WrapperFile.mappingOperationForSignOperation(SPropertyOperations.getEnum(conjuctionLogicalExpression, PROPS.operation$BCG5), ctx);
    tgs.appendNode(SLinkOperations.getTarget(conjuctionLogicalExpression, LINKS.right$BwED));
  }
  public static void conditionsPointCutOperation(SNode pointCut, SNode given, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append(SPropertyOperations.getEnum(pointCut, PROPS.typePointCut$$H91).toString());
    tgs.append("(");
    tgs.append(")");
    tgs.append(":");
    WrapperFile.callToMethedOperation(SEnumOperations.getMemberName0(SPropertyOperations.getEnum(pointCut, PROPS.call$26oK)), "", ctx);
    tgs.newLine();
    tgs.append("&&");
    tgs.append(" ");
    tgs.append("if");
    tgs.newLine();
    tgs.append("(");
    tgs.newLine();
    tgs.appendNode(SLinkOperations.getTarget(given, LINKS.logicalExpression$1QZ_));
    tgs.append(")");
    tgs.newLine();


  }
  public static void wrapperScriptOperation(SNode wrapperScript, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    WrapperFile.importsOperation(ctx);
    tgs.newLine();
    WrapperFile.headerOperation(SPropertyOperations.getString(wrapperScript, PROPS.name$tAp1), ctx);
    tgs.append("{");
    tgs.newLine();
    WrapperFile.pointcutsOperation(SLinkOperations.getChildren(SLinkOperations.getTarget(wrapperScript, LINKS.when$Bwg0), LINKS.pointCuts$EZUY), ctx);
    tgs.newLine();
    for (SNode pointCut : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(wrapperScript, LINKS.when$Bwg0), LINKS.pointCuts$EZUY))) {
      WrapperFile.conditionsPointCutOperation(pointCut, SLinkOperations.getTarget(wrapperScript, LINKS.given$Bwf2), ctx);
      tgs.newLine();

    }

    tgs.append("}");
  }

  private static final class PROPS {
    /*package*/ static final SProperty call$26oK = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc046e0b59L, 0x53be3ecc047cf223L, "call");
    /*package*/ static final SProperty left$EP9q = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8c9dL, 0x53be3ecc0468105bL, "left");
    /*package*/ static final SProperty operation$6pQJ = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8c9dL, 0x53be3ecc0462d409L, "operation");
    /*package*/ static final SProperty right$BLaw = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8ce0L, 0x53be3ecc045a8ce1L, "right");
    /*package*/ static final SProperty value$QRR0 = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc0462d3fbL, 0x53be3ecc0462d3fcL, "value");
    /*package*/ static final SProperty operation$BCG5 = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bd7L, 0x53be3ecc045a8c62L, "operation");
    /*package*/ static final SProperty typePointCut$$H91 = MetaAdapterFactory.getProperty(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc046e0b59L, 0x53be3ecc046e0b64L, "typePointCut");
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink distance$98Dw = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc048c5944L, 0x53be3ecc048c5945L, "distance");
    /*package*/ static final SContainmentLink left$BwFB = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bd7L, 0x53be3ecc045a8bdcL, "left");
    /*package*/ static final SContainmentLink right$BwED = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bd7L, 0x53be3ecc045a8bdaL, "right");
    /*package*/ static final SContainmentLink logicalExpression$1QZ_ = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcaL, 0x53be3ecc045b453aL, "logicalExpression");
    /*package*/ static final SContainmentLink when$Bwg0 = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bc3L, 0x53be3ecc045a8bcfL, "when");
    /*package*/ static final SContainmentLink pointCuts$EZUY = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bcbL, 0x53be3ecc046e0bf5L, "pointCuts");
    /*package*/ static final SContainmentLink given$Bwf2 = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045a8bc3L, 0x53be3ecc045a8bcdL, "given");
  }
}
