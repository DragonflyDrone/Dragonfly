package WrapperDSL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import WrapperDSL.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Around:
        return new Around_TextGen();
      case LanguageConceptSwitch.Before:
        return new Before_TextGen();
      case LanguageConceptSwitch.Command:
        return new Command_TextGen();
      case LanguageConceptSwitch.ConjunctionExpression:
        return new ConjunctionExpression_TextGen();
      case LanguageConceptSwitch.GPSSensorNormalLogicalExpression:
        return new GPSSensorNormalLogicalExpression_TextGen();
      case LanguageConceptSwitch.Given:
        return new Given_TextGen();
      case LanguageConceptSwitch.IntegerConstant:
        return new IntegerConstant_TextGen();
      case LanguageConceptSwitch.Land:
        return new Land_TextGen();
      case LanguageConceptSwitch.LightWindState:
        return new LightWindState_TextGen();
      case LanguageConceptSwitch.NormalWindState:
        return new NormalWindState_TextGen();
      case LanguageConceptSwitch.Operator:
        return new Operator_TextGen();
      case LanguageConceptSwitch.SafeLanding:
        return new SafeLanding_TextGen();
      case LanguageConceptSwitch.ShutDown:
        return new ShutDown_TextGen();
      case LanguageConceptSwitch.Start:
        return new Start_TextGen();
      case LanguageConceptSwitch.StepLest:
        return new StepLest_TextGen();
      case LanguageConceptSwitch.StepNearestToDestiny:
        return new StepNearestToDestiny_TextGen();
      case LanguageConceptSwitch.StepNearestToLand:
        return new StepNearestToLand_TextGen();
      case LanguageConceptSwitch.StepNearestToOrigem:
        return new StepNearestToOrigem_TextGen();
      case LanguageConceptSwitch.StepNearestToPosition:
        return new StepNearestToPosition_TextGen();
      case LanguageConceptSwitch.StepNearestToWater:
        return new StepNearestToWater_TextGen();
      case LanguageConceptSwitch.StepNorth:
        return new StepNorth_TextGen();
      case LanguageConceptSwitch.StepSouth:
        return new StepSouth_TextGen();
      case LanguageConceptSwitch.StepWest:
        return new StepWest_TextGen();
      case LanguageConceptSwitch.StringConstant:
        return new StringConstant_TextGen();
      case LanguageConceptSwitch.StrongWindState:
        return new StrongWindState_TextGen();
      case LanguageConceptSwitch.TakeOff:
        return new TakeOff_TextGen();
      case LanguageConceptSwitch.TurnLest:
        return new TurnLest_TextGen();
      case LanguageConceptSwitch.TurnNorth:
        return new TurnNorth_TextGen();
      case LanguageConceptSwitch.TurnSouth:
        return new TurnSouth_TextGen();
      case LanguageConceptSwitch.TurnWest:
        return new TurnWest_TextGen();
      case LanguageConceptSwitch.WindSensorNormalLogicalExpression:
        return new WindSensorNormalLogicalExpression_TextGen();
      case LanguageConceptSwitch.WrapperScript:
        return new WrapperScript_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.WrapperScript$ol)) {
        String fname = getFileName_WrapperScript(root);
        String ext = getFileExtension_WrapperScript(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_WrapperScript(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_WrapperScript(SNode node) {
    return "java";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept WrapperScript$ol = MetaAdapterFactory.getConcept(0x3c0688eb4e024d93L, 0x86be1d02f4019544L, 0x5ef0a89f564c5022L, "WrapperDSL.structure.WrapperScript");
  }
}
