package WrapperDSL.textGen;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public abstract class WrapperScriptToWrapperDragonFly {
  public static void wrapperScript(SNode wrapperScript, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    WrapperScriptToWrapperDragonFly.imports(ctx);

    tgs.newLine();
    tgs.newLine();

    tgs.append("public aspect");
    tgs.append(" ");
    tgs.append(SPropertyOperations.getString(wrapperScript, PROPS.name$tAp1));
    tgs.append("{");
    tgs.newLine();
    tgs.newLine();
    tgs.newLine();

    WrapperScriptToWrapperDragonFly.pointcut(SLinkOperations.getTarget(SLinkOperations.getTarget(wrapperScript, LINKS.When$qABs), LINKS.call$SPMZ), ctx);
    tgs.newLine();
    tgs.newLine();

    WrapperScriptToWrapperDragonFly.conditionForPointCut(SLinkOperations.getTarget(wrapperScript, LINKS.Given$qAAu), SLinkOperations.getTarget(wrapperScript, LINKS.When$qABs), ctx);
    tgs.append("{");
    tgs.newLine();
    WrapperScriptToWrapperDragonFly.thenOperation(SLinkOperations.getTarget(wrapperScript, LINKS.Then$qAN4), SPropertyOperations.getString(wrapperScript, PROPS.name$tAp1), ctx);
    tgs.newLine();
    if (BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(wrapperScript, LINKS.When$qABs), LINKS.call$SPMZ)).equals("SafeLanding")) {
      tgs.append("return false;");
      tgs.newLine();
    }
    tgs.append("}");
    tgs.newLine();


    tgs.append("}");



  }
  public static void pointcut(SNode command, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    String command_string = BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(command);
    command_string = command_string + "(*)";
    tgs.append("pointcut");
    tgs.append(" ");
    tgs.appendNode(command);
    tgs.append(":");
    tgs.append(" ");
    tgs.append("call");
    tgs.append(" ");
    tgs.append("(* model.entity.drone.DroneBusinessObject.");
    tgs.append(command_string);
  }
  public static void conditionForPointCut(SNode given, SNode when, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    String calledMethedName = BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(SLinkOperations.getTarget(when, LINKS.call$SPMZ));
    String calledMethed = calledMethedName + "()";

    String advice = BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(SLinkOperations.getTarget(when, LINKS.advice$MGIQ));
    String returnValue = "void";

    if (calledMethedName.equals("SafeLanding")) {
      returnValue = "boolean";
    }

    tgs.append(returnValue);
    tgs.append(" ");
    tgs.append(advice);
    tgs.append("()");
    tgs.append(":");
    tgs.append(" ");
    tgs.append(calledMethed);
    tgs.newLine();
    tgs.append("&&");
    tgs.newLine();
    tgs.append("if");
    tgs.newLine();
    tgs.append("(");
    tgs.newLine();
    WrapperScriptToWrapperDragonFly.givenOperation(given, ctx);
    tgs.newLine();
    tgs.append(")");
    tgs.newLine();


  }
  public static void imports(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("package wrappers;");
    tgs.newLine();
    tgs.append("import controller.DroneController;");
    tgs.newLine();
    tgs.append("import controller.EnvironmentController;");
    tgs.newLine();
    tgs.append("import controller.LoggerController;");
    tgs.newLine();
    tgs.append("import javafx.application.Platform;");
    tgs.newLine();
    tgs.append("import javafx.concurrent.Task;");
    tgs.newLine();
    tgs.append("import model.entity.drone.Drone;");
    tgs.newLine();
    tgs.append("import model.entity.drone.DroneBusinessObject;");
    tgs.newLine();
    tgs.append("import org.aspectj.lang.JoinPoint;");
    tgs.newLine();
    tgs.append("import view.CellView;");
    tgs.newLine();
    tgs.append("import view.drone.DroneView;");
    tgs.newLine();
    tgs.append("import view.river.RiverView;");
    tgs.newLine();
    tgs.newLine();
    tgs.newLine();
    tgs.append("import java.util.ArrayList;");
    tgs.newLine();
    tgs.append("import java.util.List;");
    tgs.newLine();


  }
  public static void givenOperation(SNode given, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.appendNode(given);
  }
  public static void whenOperation(SNode when, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    WrapperScriptToWrapperDragonFly.adviceOperation(SLinkOperations.getTarget(when, LINKS.advice$MGIQ), ctx);
    tgs.appendNode(SLinkOperations.getTarget(when, LINKS.call$SPMZ));
  }
  public static void thenOperation(SNode then, String nameScript, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("Drone drone = (Drone) thisJoinPoint.getArgs()[0];");
    tgs.newLine();
    tgs.append("System.out.println(\"Drone[\"+drone.getLabel()+\"] \"+\"");
    tgs.append(nameScript);
    tgs.append("\");");
    tgs.newLine();
    tgs.append("LoggerController.getInstance().print(\"Drone[\"+drone.getLabel()+\"] \"+\"");
    tgs.append(nameScript);
    tgs.append("\");");
    tgs.newLine();


  }
  public static void adviceOperation(SNode adviceAbstract, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.appendNode(adviceAbstract);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink When$qABs = MetaAdapterFactory.getContainmentLink(0x3c0688eb4e024d93L, 0x86be1d02f4019544L, 0x5ef0a89f564c5022L, 0x5ef0a89f564c5027L, "When");
    /*package*/ static final SContainmentLink call$SPMZ = MetaAdapterFactory.getContainmentLink(0x3c0688eb4e024d93L, 0x86be1d02f4019544L, 0x7cbf9892eb647163L, 0x1fc7448200dd6d10L, "call");
    /*package*/ static final SContainmentLink Given$qAAu = MetaAdapterFactory.getContainmentLink(0x3c0688eb4e024d93L, 0x86be1d02f4019544L, 0x5ef0a89f564c5022L, 0x5ef0a89f564c5025L, "Given");
    /*package*/ static final SContainmentLink Then$qAN4 = MetaAdapterFactory.getContainmentLink(0x3c0688eb4e024d93L, 0x86be1d02f4019544L, 0x5ef0a89f564c5022L, 0x5ef0a89f564c502aL, "Then");
    /*package*/ static final SContainmentLink advice$MGIQ = MetaAdapterFactory.getContainmentLink(0x3c0688eb4e024d93L, 0x86be1d02f4019544L, 0x7cbf9892eb647163L, 0x6b53188b89b670f5L, "advice");
  }
}
