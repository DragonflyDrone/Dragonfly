package WrapperDSL.textGen;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public abstract class transformationOperations {
  public static void whenToPointcut(SNode when, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
  }
  public static void whenAndThenToContitionalPointCutCall(SNode when, SNode then, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
  }
  public static void printExceptionalScenarioInLog(SNode exceptionalScenario, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    String nameExceptionalScenario = SPropertyOperations.getString(exceptionalScenario, PROPS.name$tAp1);

    tgs.append("System.out.println(\"Drone[\"+drone.getLabel()+\"] \"+\"");
    tgs.append(nameExceptionalScenario);
    tgs.append("\");\n");
    tgs.append("LoggerController.getInstance().print(\"Drone[\"+drone.getLabel()+\"] ");
    tgs.append(nameExceptionalScenario);
    tgs.append("\");\n");
  }
  public static void transformOperator(String operator, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    switch (operator) {
      case "is":
        tgs.append("==");
        break;
      case "not is":
        tgs.append("!=");
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
